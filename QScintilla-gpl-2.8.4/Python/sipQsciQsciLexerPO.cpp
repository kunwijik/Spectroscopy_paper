/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.3 on Mon Sep 22 18:00:47 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of QScintilla.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQsci.h"

#line 29 "sip/qscilexerpo.sip"
#include <Qsci/qscilexerpo.h>
#line 34 "./sipQsciQsciLexerPO.cpp"

#line 34 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "./sipQsciQsciLexerPO.cpp"
#line 31 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qsettings.sip"
#include <qsettings.h>
#line 41 "./sipQsciQsciLexerPO.cpp"
#line 36 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 44 "./sipQsciQsciLexerPO.cpp"
#line 35 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qfont.sip"
#include <qfont.h>
#line 47 "./sipQsciQsciLexerPO.cpp"
#line 35 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qcolor.sip"
#include <qcolor.h>
#line 50 "./sipQsciQsciLexerPO.cpp"
#line 29 "sip/qsciabstractapis.sip"
#include <Qsci/qsciabstractapis.h>
#line 53 "./sipQsciQsciLexerPO.cpp"
#line 29 "sip/qsciscintilla.sip"
#include <Qsci/qsciscintilla.h>
#line 56 "./sipQsciQsciLexerPO.cpp"
#line 31 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "./sipQsciQsciLexerPO.cpp"
#line 355 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "./sipQsciQsciLexerPO.cpp"
#line 338 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "./sipQsciQsciLexerPO.cpp"
#line 274 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 68 "./sipQsciQsciLexerPO.cpp"
#line 33 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 71 "./sipQsciQsciLexerPO.cpp"
#line 37 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 74 "./sipQsciQsciLexerPO.cpp"
#line 35 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77 "./sipQsciQsciLexerPO.cpp"
#line 120 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 80 "./sipQsciQsciLexerPO.cpp"
#line 31 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 83 "./sipQsciQsciLexerPO.cpp"
#line 35 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 86 "./sipQsciQsciLexerPO.cpp"
#line 31 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 89 "./sipQsciQsciLexerPO.cpp"


class sipQsciLexerPO : public QsciLexerPO
{
public:
    sipQsciLexerPO(QObject*);
    virtual ~sipQsciLexerPO();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool writeProperties(QSettings&,const QString&) const;
    bool readProperties(QSettings&,const QString&);
    void setPaper(const QColor&,int);
    void setFont(const QFont&,int);
    void setEolFill(bool,int);
    void setColor(const QColor&,int);
    void setAutoIndentStyle(int);
    const char* wordCharacters() const;
    int styleBitsNeeded() const;
    void refreshProperties();
    QColor defaultPaper(int) const;
    QFont defaultFont(int) const;
    bool defaultEolFill(int) const;
    QColor defaultColor(int) const;
    QColor paper(int) const;
    QString description(int) const;
    const char* keywords(int) const;
    QFont font(int) const;
    bool eolFill(int) const;
    QColor color(int) const;
    int lexerId() const;
    const char* lexer() const;
    const char* language() const;
    void setFoldCompact(bool);
    void setFoldComments(bool);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQsciLexerPO(const sipQsciLexerPO &);
    sipQsciLexerPO &operator = (const sipQsciLexerPO &);

    char sipPyMethods[32];
};

sipQsciLexerPO::sipQsciLexerPO(QObject*a0): QsciLexerPO(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQsciLexerPO::~sipQsciLexerPO()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQsciLexerPO::metaObject() const
{
    return sip_Qsci_qt_metaobject(sipPySelf,sipType_QsciLexerPO);
}

int sipQsciLexerPO::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QsciLexerPO::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_Qsci_qt_metacall(sipPySelf,sipType_QsciLexerPO,_c,_id,_a);

    return _id;
}

void *sipQsciLexerPO::qt_metacast(const char *_clname)
{
    return (sip_Qsci_qt_metacast(sipPySelf, sipType_QsciLexerPO, _clname)) ? this : QsciLexerPO::qt_metacast(_clname);
}

void sipQsciLexerPO::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QsciLexerPO::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_Qsci_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerPO::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QsciLexerPO::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_Qsci_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerPO::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QsciLexerPO::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_Qsci_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerPO::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QsciLexerPO::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_Qsci_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerPO::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QsciLexerPO::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_Qsci_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQsciLexerPO::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QsciLexerPO::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_Qsci_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQsciLexerPO::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QsciLexerPO::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_Qsci_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQsciLexerPO::writeProperties(QSettings& a0,const QString& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_writeProperties);

    if (!sipMeth)
        return QsciLexerPO::writeProperties(a0,a1);

    extern bool sipVH_Qsci_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSettings&,const QString&);

    return sipVH_Qsci_7(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQsciLexerPO::readProperties(QSettings& a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_readProperties);

    if (!sipMeth)
        return QsciLexerPO::readProperties(a0,a1);

    extern bool sipVH_Qsci_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSettings&,const QString&);

    return sipVH_Qsci_7(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerPO::setPaper(const QColor& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_setPaper);

    if (!sipMeth)
    {
        QsciLexerPO::setPaper(a0,a1);
        return;
    }

    extern void sipVH_Qsci_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QColor&,int);

    sipVH_Qsci_8(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerPO::setFont(const QFont& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_setFont);

    if (!sipMeth)
    {
        QsciLexerPO::setFont(a0,a1);
        return;
    }

    extern void sipVH_Qsci_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFont&,int);

    sipVH_Qsci_9(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerPO::setEolFill(bool a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_setEolFill);

    if (!sipMeth)
    {
        QsciLexerPO::setEolFill(a0,a1);
        return;
    }

    extern void sipVH_Qsci_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool,int);

    sipVH_Qsci_10(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerPO::setColor(const QColor& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_setColor);

    if (!sipMeth)
    {
        QsciLexerPO::setColor(a0,a1);
        return;
    }

    extern void sipVH_Qsci_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QColor&,int);

    sipVH_Qsci_8(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerPO::setAutoIndentStyle(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_setAutoIndentStyle);

    if (!sipMeth)
    {
        QsciLexerPO::setAutoIndentStyle(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_Qsci_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

const char* sipQsciLexerPO::wordCharacters() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_wordCharacters);

    if (!sipMeth)
        return QsciLexerPO::wordCharacters();

    extern const char* sipVH_Qsci_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_11(sipGILState, 0, sipPySelf, sipMeth, -50);
}

int sipQsciLexerPO::styleBitsNeeded() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_styleBitsNeeded);

    if (!sipMeth)
        return QsciLexerPO::styleBitsNeeded();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_Qsci_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQsciLexerPO::refreshProperties()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_refreshProperties);

    if (!sipMeth)
    {
        QsciLexerPO::refreshProperties();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

QColor sipQsciLexerPO::defaultPaper(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_defaultPaper);

    if (!sipMeth)
        return QsciLexerPO::defaultPaper(a0);

    extern QColor sipVH_Qsci_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QFont sipQsciLexerPO::defaultFont(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_defaultFont);

    if (!sipMeth)
        return QsciLexerPO::defaultFont(a0);

    extern QFont sipVH_Qsci_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQsciLexerPO::defaultEolFill(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_defaultEolFill);

    if (!sipMeth)
        return QsciLexerPO::defaultEolFill(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_23)(sipModuleAPI_Qsci_QtCore->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QColor sipQsciLexerPO::defaultColor(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_defaultColor);

    if (!sipMeth)
        return QsciLexerPO::defaultColor(a0);

    extern QColor sipVH_Qsci_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QColor sipQsciLexerPO::paper(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_paper);

    if (!sipMeth)
        return QsciLexerPO::paper(a0);

    extern QColor sipVH_Qsci_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QString sipQsciLexerPO::description(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_description);

    if (!sipMeth)
        return QsciLexerPO::description(a0);

    typedef QString (*sipVH_QtGui_111)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtGui_111)(sipModuleAPI_Qsci_QtGui->em_virthandlers[111]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

const char* sipQsciLexerPO::keywords(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_keywords);

    if (!sipMeth)
        return QsciLexerPO::keywords(a0);

    typedef const char* (*sipVH_QtGui_150)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, int);

    return ((sipVH_QtGui_150)(sipModuleAPI_Qsci_QtGui->em_virthandlers[150]))(sipGILState, 0, sipPySelf, sipMeth, a0, -51);
}

QFont sipQsciLexerPO::font(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_font);

    if (!sipMeth)
        return QsciLexerPO::font(a0);

    extern QFont sipVH_Qsci_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQsciLexerPO::eolFill(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_eolFill);

    if (!sipMeth)
        return QsciLexerPO::eolFill(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_23)(sipModuleAPI_Qsci_QtCore->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QColor sipQsciLexerPO::color(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_color);

    if (!sipMeth)
        return QsciLexerPO::color(a0);

    extern QColor sipVH_Qsci_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQsciLexerPO::lexerId() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_lexerId);

    if (!sipMeth)
        return QsciLexerPO::lexerId();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_Qsci_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

const char* sipQsciLexerPO::lexer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_lexer);

    if (!sipMeth)
        return QsciLexerPO::lexer();

    extern const char* sipVH_Qsci_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_11(sipGILState, 0, sipPySelf, sipMeth, -52);
}

const char* sipQsciLexerPO::language() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_language);

    if (!sipMeth)
        return QsciLexerPO::language();

    extern const char* sipVH_Qsci_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_11(sipGILState, 0, sipPySelf, sipMeth, -53);
}

void sipQsciLexerPO::setFoldCompact(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_setFoldCompact);

    if (!sipMeth)
    {
        QsciLexerPO::setFoldCompact(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerPO::setFoldComments(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_setFoldComments);

    if (!sipMeth)
    {
        QsciLexerPO::setFoldComments(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QsciLexerPO_language, "QsciLexerPO.language() -> str");

extern "C" {static PyObject *meth_QsciLexerPO_language(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPO_language(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QsciLexerPO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPO, &sipCpp))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerPO::language() : sipCpp->language());

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPO, sipName_language, doc_QsciLexerPO_language);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPO_lexer, "QsciLexerPO.lexer() -> str");

extern "C" {static PyObject *meth_QsciLexerPO_lexer(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPO_lexer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QsciLexerPO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPO, &sipCpp))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerPO::lexer() : sipCpp->lexer());

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPO, sipName_lexer, doc_QsciLexerPO_lexer);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPO_defaultColor, "QsciLexerPO.defaultColor(int) -> QColor");

extern "C" {static PyObject *meth_QsciLexerPO_defaultColor(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPO_defaultColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerPO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerPO, &sipCpp, &a0))
        {
            QColor*sipRes;

            sipRes = new QColor((sipSelfWasArg ? sipCpp->QsciLexerPO::defaultColor(a0) : sipCpp->defaultColor(a0)));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPO, sipName_defaultColor, doc_QsciLexerPO_defaultColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPO_defaultFont, "QsciLexerPO.defaultFont(int) -> QFont");

extern "C" {static PyObject *meth_QsciLexerPO_defaultFont(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPO_defaultFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerPO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerPO, &sipCpp, &a0))
        {
            QFont*sipRes;

            sipRes = new QFont((sipSelfWasArg ? sipCpp->QsciLexerPO::defaultFont(a0) : sipCpp->defaultFont(a0)));

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPO, sipName_defaultFont, doc_QsciLexerPO_defaultFont);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPO_description, "QsciLexerPO.description(int) -> QString");

extern "C" {static PyObject *meth_QsciLexerPO_description(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPO_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerPO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerPO, &sipCpp, &a0))
        {
            QString*sipRes;

            sipRes = new QString((sipSelfWasArg ? sipCpp->QsciLexerPO::description(a0) : sipCpp->description(a0)));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPO, sipName_description, doc_QsciLexerPO_description);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPO_refreshProperties, "QsciLexerPO.refreshProperties()");

extern "C" {static PyObject *meth_QsciLexerPO_refreshProperties(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPO_refreshProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciLexerPO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPO, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QsciLexerPO::refreshProperties() : sipCpp->refreshProperties());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPO, sipName_refreshProperties, doc_QsciLexerPO_refreshProperties);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPO_foldComments, "QsciLexerPO.foldComments() -> bool");

extern "C" {static PyObject *meth_QsciLexerPO_foldComments(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPO_foldComments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerPO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPO, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->foldComments();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPO, sipName_foldComments, doc_QsciLexerPO_foldComments);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPO_foldCompact, "QsciLexerPO.foldCompact() -> bool");

extern "C" {static PyObject *meth_QsciLexerPO_foldCompact(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPO_foldCompact(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerPO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPO, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->foldCompact();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPO, sipName_foldCompact, doc_QsciLexerPO_foldCompact);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPO_setFoldComments, "QsciLexerPO.setFoldComments(bool)");

extern "C" {static PyObject *meth_QsciLexerPO_setFoldComments(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPO_setFoldComments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciLexerPO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerPO, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QsciLexerPO::setFoldComments(a0) : sipCpp->setFoldComments(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPO, sipName_setFoldComments, doc_QsciLexerPO_setFoldComments);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPO_setFoldCompact, "QsciLexerPO.setFoldCompact(bool)");

extern "C" {static PyObject *meth_QsciLexerPO_setFoldCompact(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPO_setFoldCompact(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciLexerPO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerPO, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QsciLexerPO::setFoldCompact(a0) : sipCpp->setFoldCompact(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPO, sipName_setFoldCompact, doc_QsciLexerPO_setFoldCompact);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPO_readProperties, "QsciLexerPO.readProperties(QSettings, QString) -> bool");

extern "C" {static PyObject *meth_QsciLexerPO_readProperties(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPO_readProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSettings* a0;
        const QString* a1;
        int a1State = 0;
        QsciLexerPO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QsciLexerPO, &sipCpp, sipType_QSettings, &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerPO::readProperties(*a0,*a1) : sipCpp->readProperties(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPO, sipName_readProperties, doc_QsciLexerPO_readProperties);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPO_writeProperties, "QsciLexerPO.writeProperties(QSettings, QString) -> bool");

extern "C" {static PyObject *meth_QsciLexerPO_writeProperties(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPO_writeProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSettings* a0;
        const QString* a1;
        int a1State = 0;
        const QsciLexerPO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QsciLexerPO, &sipCpp, sipType_QSettings, &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerPO::writeProperties(*a0,*a1) : sipCpp->writeProperties(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPO, sipName_writeProperties, doc_QsciLexerPO_writeProperties);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QsciLexerPO(void *, const sipTypeDef *);}
static void *cast_QsciLexerPO(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QsciLexerPO)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QsciLexer)->ctd_cast((QsciLexer *)(QsciLexerPO *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QsciLexerPO(void *, int);}
static void release_QsciLexerPO(void *sipCppV,int)
{
    QsciLexerPO *sipCpp = reinterpret_cast<QsciLexerPO *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QsciLexerPO(sipSimpleWrapper *);}
static void dealloc_QsciLexerPO(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQsciLexerPO *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QsciLexerPO(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QsciLexerPO(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QsciLexerPO(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQsciLexerPO *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQsciLexerPO(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QsciLexerPO[] = {{8, 255, 1}};


static PyMethodDef methods_QsciLexerPO[] = {
    {SIP_MLNAME_CAST(sipName_defaultColor), meth_QsciLexerPO_defaultColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPO_defaultColor)},
    {SIP_MLNAME_CAST(sipName_defaultFont), meth_QsciLexerPO_defaultFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPO_defaultFont)},
    {SIP_MLNAME_CAST(sipName_description), meth_QsciLexerPO_description, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPO_description)},
    {SIP_MLNAME_CAST(sipName_foldComments), meth_QsciLexerPO_foldComments, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPO_foldComments)},
    {SIP_MLNAME_CAST(sipName_foldCompact), meth_QsciLexerPO_foldCompact, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPO_foldCompact)},
    {SIP_MLNAME_CAST(sipName_language), meth_QsciLexerPO_language, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPO_language)},
    {SIP_MLNAME_CAST(sipName_lexer), meth_QsciLexerPO_lexer, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPO_lexer)},
    {SIP_MLNAME_CAST(sipName_readProperties), meth_QsciLexerPO_readProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPO_readProperties)},
    {SIP_MLNAME_CAST(sipName_refreshProperties), meth_QsciLexerPO_refreshProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPO_refreshProperties)},
    {SIP_MLNAME_CAST(sipName_setFoldComments), meth_QsciLexerPO_setFoldComments, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPO_setFoldComments)},
    {SIP_MLNAME_CAST(sipName_setFoldCompact), meth_QsciLexerPO_setFoldCompact, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPO_setFoldCompact)},
    {SIP_MLNAME_CAST(sipName_writeProperties), meth_QsciLexerPO_writeProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPO_writeProperties)}
};

static sipEnumMemberDef enummembers_QsciLexerPO[] = {
    {sipName_Comment, static_cast<int>(QsciLexerPO::Comment), -1},
    {sipName_Default, static_cast<int>(QsciLexerPO::Default), -1},
    {sipName_Flags, static_cast<int>(QsciLexerPO::Flags), -1},
    {sipName_Fuzzy, static_cast<int>(QsciLexerPO::Fuzzy), -1},
    {sipName_MessageContext, static_cast<int>(QsciLexerPO::MessageContext), -1},
    {sipName_MessageContextText, static_cast<int>(QsciLexerPO::MessageContextText), -1},
    {sipName_MessageContextTextEOL, static_cast<int>(QsciLexerPO::MessageContextTextEOL), -1},
    {sipName_MessageId, static_cast<int>(QsciLexerPO::MessageId), -1},
    {sipName_MessageIdText, static_cast<int>(QsciLexerPO::MessageIdText), -1},
    {sipName_MessageIdTextEOL, static_cast<int>(QsciLexerPO::MessageIdTextEOL), -1},
    {sipName_MessageString, static_cast<int>(QsciLexerPO::MessageString), -1},
    {sipName_MessageStringText, static_cast<int>(QsciLexerPO::MessageStringText), -1},
    {sipName_MessageStringTextEOL, static_cast<int>(QsciLexerPO::MessageStringTextEOL), -1},
    {sipName_ProgrammerComment, static_cast<int>(QsciLexerPO::ProgrammerComment), -1},
    {sipName_Reference, static_cast<int>(QsciLexerPO::Reference), -1},
};

PyDoc_STRVAR(doc_QsciLexerPO, "\1QsciLexerPO(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_Qsci_QsciLexerPO = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QsciLexerPO,
        {0}
    },
    {
        sipNameNr_QsciLexerPO,
        {0, 0, 1},
        12, methods_QsciLexerPO,
        15, enummembers_QsciLexerPO,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QsciLexerPO,
    -1,
    -1,
    supers_QsciLexerPO,
    0,
    init_type_QsciLexerPO,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QsciLexerPO,
    0,
    0,
    0,
    release_QsciLexerPO,
    cast_QsciLexerPO,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QsciLexerPO::staticMetaObject,
    0,
    0
};
