/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.3 on Mon Sep 22 18:00:47 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of QScintilla.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQsci.h"

#line 29 "sip/qscilexerxml.sip"
#include <Qsci/qscilexerxml.h>
#line 34 "./sipQsciQsciLexerXML.cpp"

#line 34 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "./sipQsciQsciLexerXML.cpp"
#line 31 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qsettings.sip"
#include <qsettings.h>
#line 41 "./sipQsciQsciLexerXML.cpp"
#line 36 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 44 "./sipQsciQsciLexerXML.cpp"
#line 35 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qcolor.sip"
#include <qcolor.h>
#line 47 "./sipQsciQsciLexerXML.cpp"
#line 35 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qfont.sip"
#include <qfont.h>
#line 50 "./sipQsciQsciLexerXML.cpp"
#line 29 "sip/qsciabstractapis.sip"
#include <Qsci/qsciabstractapis.h>
#line 53 "./sipQsciQsciLexerXML.cpp"
#line 29 "sip/qsciscintilla.sip"
#include <Qsci/qsciscintilla.h>
#line 56 "./sipQsciQsciLexerXML.cpp"
#line 31 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "./sipQsciQsciLexerXML.cpp"
#line 355 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "./sipQsciQsciLexerXML.cpp"
#line 338 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "./sipQsciQsciLexerXML.cpp"
#line 274 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 68 "./sipQsciQsciLexerXML.cpp"
#line 33 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 71 "./sipQsciQsciLexerXML.cpp"
#line 37 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 74 "./sipQsciQsciLexerXML.cpp"
#line 35 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77 "./sipQsciQsciLexerXML.cpp"
#line 120 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 80 "./sipQsciQsciLexerXML.cpp"
#line 31 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 83 "./sipQsciQsciLexerXML.cpp"
#line 35 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 86 "./sipQsciQsciLexerXML.cpp"
#line 31 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 89 "./sipQsciQsciLexerXML.cpp"


class sipQsciLexerXML : public QsciLexerXML
{
public:
    sipQsciLexerXML(QObject*);
    virtual ~sipQsciLexerXML();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool writeProperties(QSettings&,const QString&) const;
    bool readProperties(QSettings&,const QString&);
    void setPaper(const QColor&,int);
    void setFont(const QFont&,int);
    void setEolFill(bool,int);
    void setColor(const QColor&,int);
    void setAutoIndentStyle(int);
    const char* wordCharacters() const;
    int styleBitsNeeded() const;
    void refreshProperties();
    QColor defaultPaper(int) const;
    QFont defaultFont(int) const;
    bool defaultEolFill(int) const;
    QColor defaultColor(int) const;
    QColor paper(int) const;
    QString description(int) const;
    const char* keywords(int) const;
    QFont font(int) const;
    bool eolFill(int) const;
    QColor color(int) const;
    int lexerId() const;
    const char* lexer() const;
    const char* language() const;
    void setCaseSensitiveTags(bool);
    void setFoldPreprocessor(bool);
    void setFoldCompact(bool);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQsciLexerXML(const sipQsciLexerXML &);
    sipQsciLexerXML &operator = (const sipQsciLexerXML &);

    char sipPyMethods[33];
};

sipQsciLexerXML::sipQsciLexerXML(QObject*a0): QsciLexerXML(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQsciLexerXML::~sipQsciLexerXML()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQsciLexerXML::metaObject() const
{
    return sip_Qsci_qt_metaobject(sipPySelf,sipType_QsciLexerXML);
}

int sipQsciLexerXML::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QsciLexerXML::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_Qsci_qt_metacall(sipPySelf,sipType_QsciLexerXML,_c,_id,_a);

    return _id;
}

void *sipQsciLexerXML::qt_metacast(const char *_clname)
{
    return (sip_Qsci_qt_metacast(sipPySelf, sipType_QsciLexerXML, _clname)) ? this : QsciLexerXML::qt_metacast(_clname);
}

void sipQsciLexerXML::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QsciLexerXML::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_Qsci_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerXML::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QsciLexerXML::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_Qsci_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerXML::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QsciLexerXML::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_Qsci_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerXML::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QsciLexerXML::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_Qsci_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerXML::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QsciLexerXML::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_Qsci_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQsciLexerXML::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QsciLexerXML::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_Qsci_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQsciLexerXML::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QsciLexerXML::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_Qsci_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQsciLexerXML::writeProperties(QSettings& a0,const QString& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_writeProperties);

    if (!sipMeth)
        return QsciLexerXML::writeProperties(a0,a1);

    extern bool sipVH_Qsci_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSettings&,const QString&);

    return sipVH_Qsci_7(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQsciLexerXML::readProperties(QSettings& a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_readProperties);

    if (!sipMeth)
        return QsciLexerXML::readProperties(a0,a1);

    extern bool sipVH_Qsci_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSettings&,const QString&);

    return sipVH_Qsci_7(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerXML::setPaper(const QColor& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_setPaper);

    if (!sipMeth)
    {
        QsciLexerXML::setPaper(a0,a1);
        return;
    }

    extern void sipVH_Qsci_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QColor&,int);

    sipVH_Qsci_8(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerXML::setFont(const QFont& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_setFont);

    if (!sipMeth)
    {
        QsciLexerXML::setFont(a0,a1);
        return;
    }

    extern void sipVH_Qsci_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFont&,int);

    sipVH_Qsci_9(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerXML::setEolFill(bool a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_setEolFill);

    if (!sipMeth)
    {
        QsciLexerXML::setEolFill(a0,a1);
        return;
    }

    extern void sipVH_Qsci_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool,int);

    sipVH_Qsci_10(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerXML::setColor(const QColor& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_setColor);

    if (!sipMeth)
    {
        QsciLexerXML::setColor(a0,a1);
        return;
    }

    extern void sipVH_Qsci_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QColor&,int);

    sipVH_Qsci_8(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerXML::setAutoIndentStyle(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_setAutoIndentStyle);

    if (!sipMeth)
    {
        QsciLexerXML::setAutoIndentStyle(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_Qsci_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

const char* sipQsciLexerXML::wordCharacters() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_wordCharacters);

    if (!sipMeth)
        return QsciLexerXML::wordCharacters();

    extern const char* sipVH_Qsci_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_11(sipGILState, 0, sipPySelf, sipMeth, -6);
}

int sipQsciLexerXML::styleBitsNeeded() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_styleBitsNeeded);

    if (!sipMeth)
        return QsciLexerXML::styleBitsNeeded();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_Qsci_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQsciLexerXML::refreshProperties()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_refreshProperties);

    if (!sipMeth)
    {
        QsciLexerXML::refreshProperties();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

QColor sipQsciLexerXML::defaultPaper(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_defaultPaper);

    if (!sipMeth)
        return QsciLexerXML::defaultPaper(a0);

    extern QColor sipVH_Qsci_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QFont sipQsciLexerXML::defaultFont(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_defaultFont);

    if (!sipMeth)
        return QsciLexerXML::defaultFont(a0);

    extern QFont sipVH_Qsci_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQsciLexerXML::defaultEolFill(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_defaultEolFill);

    if (!sipMeth)
        return QsciLexerXML::defaultEolFill(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_23)(sipModuleAPI_Qsci_QtCore->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QColor sipQsciLexerXML::defaultColor(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_defaultColor);

    if (!sipMeth)
        return QsciLexerXML::defaultColor(a0);

    extern QColor sipVH_Qsci_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QColor sipQsciLexerXML::paper(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_paper);

    if (!sipMeth)
        return QsciLexerXML::paper(a0);

    extern QColor sipVH_Qsci_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QString sipQsciLexerXML::description(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_description);

    if (!sipMeth)
        return QsciLexerXML::description(a0);

    typedef QString (*sipVH_QtGui_111)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtGui_111)(sipModuleAPI_Qsci_QtGui->em_virthandlers[111]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

const char* sipQsciLexerXML::keywords(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_keywords);

    if (!sipMeth)
        return QsciLexerXML::keywords(a0);

    typedef const char* (*sipVH_QtGui_150)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, int);

    return ((sipVH_QtGui_150)(sipModuleAPI_Qsci_QtGui->em_virthandlers[150]))(sipGILState, 0, sipPySelf, sipMeth, a0, -7);
}

QFont sipQsciLexerXML::font(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_font);

    if (!sipMeth)
        return QsciLexerXML::font(a0);

    extern QFont sipVH_Qsci_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQsciLexerXML::eolFill(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_eolFill);

    if (!sipMeth)
        return QsciLexerXML::eolFill(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_23)(sipModuleAPI_Qsci_QtCore->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QColor sipQsciLexerXML::color(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_color);

    if (!sipMeth)
        return QsciLexerXML::color(a0);

    extern QColor sipVH_Qsci_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQsciLexerXML::lexerId() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_lexerId);

    if (!sipMeth)
        return QsciLexerXML::lexerId();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_Qsci_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

const char* sipQsciLexerXML::lexer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_lexer);

    if (!sipMeth)
        return QsciLexerXML::lexer();

    extern const char* sipVH_Qsci_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_11(sipGILState, 0, sipPySelf, sipMeth, -8);
}

const char* sipQsciLexerXML::language() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_language);

    if (!sipMeth)
        return QsciLexerXML::language();

    extern const char* sipVH_Qsci_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_11(sipGILState, 0, sipPySelf, sipMeth, -9);
}

void sipQsciLexerXML::setCaseSensitiveTags(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_setCaseSensitiveTags);

    if (!sipMeth)
    {
        QsciLexerXML::setCaseSensitiveTags(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerXML::setFoldPreprocessor(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_setFoldPreprocessor);

    if (!sipMeth)
    {
        QsciLexerXML::setFoldPreprocessor(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerXML::setFoldCompact(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_setFoldCompact);

    if (!sipMeth)
    {
        QsciLexerXML::setFoldCompact(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QsciLexerXML_language, "QsciLexerXML.language() -> str");

extern "C" {static PyObject *meth_QsciLexerXML_language(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerXML_language(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QsciLexerXML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerXML, &sipCpp))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerXML::language() : sipCpp->language());

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerXML, sipName_language, doc_QsciLexerXML_language);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerXML_lexer, "QsciLexerXML.lexer() -> str");

extern "C" {static PyObject *meth_QsciLexerXML_lexer(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerXML_lexer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QsciLexerXML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerXML, &sipCpp))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerXML::lexer() : sipCpp->lexer());

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerXML, sipName_lexer, doc_QsciLexerXML_lexer);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerXML_defaultColor, "QsciLexerXML.defaultColor(int) -> QColor");

extern "C" {static PyObject *meth_QsciLexerXML_defaultColor(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerXML_defaultColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerXML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerXML, &sipCpp, &a0))
        {
            QColor*sipRes;

            sipRes = new QColor((sipSelfWasArg ? sipCpp->QsciLexerXML::defaultColor(a0) : sipCpp->defaultColor(a0)));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerXML, sipName_defaultColor, doc_QsciLexerXML_defaultColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerXML_defaultEolFill, "QsciLexerXML.defaultEolFill(int) -> bool");

extern "C" {static PyObject *meth_QsciLexerXML_defaultEolFill(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerXML_defaultEolFill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerXML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerXML, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerXML::defaultEolFill(a0) : sipCpp->defaultEolFill(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerXML, sipName_defaultEolFill, doc_QsciLexerXML_defaultEolFill);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerXML_defaultFont, "QsciLexerXML.defaultFont(int) -> QFont");

extern "C" {static PyObject *meth_QsciLexerXML_defaultFont(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerXML_defaultFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerXML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerXML, &sipCpp, &a0))
        {
            QFont*sipRes;

            sipRes = new QFont((sipSelfWasArg ? sipCpp->QsciLexerXML::defaultFont(a0) : sipCpp->defaultFont(a0)));

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerXML, sipName_defaultFont, doc_QsciLexerXML_defaultFont);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerXML_defaultPaper, "QsciLexerXML.defaultPaper(int) -> QColor");

extern "C" {static PyObject *meth_QsciLexerXML_defaultPaper(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerXML_defaultPaper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerXML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerXML, &sipCpp, &a0))
        {
            QColor*sipRes;

            sipRes = new QColor((sipSelfWasArg ? sipCpp->QsciLexerXML::defaultPaper(a0) : sipCpp->defaultPaper(a0)));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerXML, sipName_defaultPaper, doc_QsciLexerXML_defaultPaper);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerXML_keywords, "QsciLexerXML.keywords(int) -> str");

extern "C" {static PyObject *meth_QsciLexerXML_keywords(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerXML_keywords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerXML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerXML, &sipCpp, &a0))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerXML::keywords(a0) : sipCpp->keywords(a0));

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerXML, sipName_keywords, doc_QsciLexerXML_keywords);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerXML_refreshProperties, "QsciLexerXML.refreshProperties()");

extern "C" {static PyObject *meth_QsciLexerXML_refreshProperties(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerXML_refreshProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciLexerXML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerXML, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QsciLexerXML::refreshProperties() : sipCpp->refreshProperties());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerXML, sipName_refreshProperties, doc_QsciLexerXML_refreshProperties);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerXML_setScriptsStyled, "QsciLexerXML.setScriptsStyled(bool)");

extern "C" {static PyObject *meth_QsciLexerXML_setScriptsStyled(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerXML_setScriptsStyled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QsciLexerXML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerXML, &sipCpp, &a0))
        {
            sipCpp->setScriptsStyled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerXML, sipName_setScriptsStyled, doc_QsciLexerXML_setScriptsStyled);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerXML_scriptsStyled, "QsciLexerXML.scriptsStyled() -> bool");

extern "C" {static PyObject *meth_QsciLexerXML_scriptsStyled(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerXML_scriptsStyled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerXML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerXML, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->scriptsStyled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerXML, sipName_scriptsStyled, doc_QsciLexerXML_scriptsStyled);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerXML_readProperties, "QsciLexerXML.readProperties(QSettings, QString) -> bool");

extern "C" {static PyObject *meth_QsciLexerXML_readProperties(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerXML_readProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSettings* a0;
        const QString* a1;
        int a1State = 0;
        QsciLexerXML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QsciLexerXML, &sipCpp, sipType_QSettings, &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerXML::readProperties(*a0,*a1) : sipCpp->readProperties(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerXML, sipName_readProperties, doc_QsciLexerXML_readProperties);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerXML_writeProperties, "QsciLexerXML.writeProperties(QSettings, QString) -> bool");

extern "C" {static PyObject *meth_QsciLexerXML_writeProperties(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerXML_writeProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSettings* a0;
        const QString* a1;
        int a1State = 0;
        const QsciLexerXML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QsciLexerXML, &sipCpp, sipType_QSettings, &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerXML::writeProperties(*a0,*a1) : sipCpp->writeProperties(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerXML, sipName_writeProperties, doc_QsciLexerXML_writeProperties);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QsciLexerXML(void *, const sipTypeDef *);}
static void *cast_QsciLexerXML(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QsciLexerXML)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QsciLexerHTML)->ctd_cast((QsciLexerHTML *)(QsciLexerXML *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QsciLexerXML(void *, int);}
static void release_QsciLexerXML(void *sipCppV,int)
{
    QsciLexerXML *sipCpp = reinterpret_cast<QsciLexerXML *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QsciLexerXML(sipSimpleWrapper *);}
static void dealloc_QsciLexerXML(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQsciLexerXML *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QsciLexerXML(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QsciLexerXML(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QsciLexerXML(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQsciLexerXML *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQsciLexerXML(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QsciLexerXML[] = {{22, 255, 1}};


static PyMethodDef methods_QsciLexerXML[] = {
    {SIP_MLNAME_CAST(sipName_defaultColor), meth_QsciLexerXML_defaultColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerXML_defaultColor)},
    {SIP_MLNAME_CAST(sipName_defaultEolFill), meth_QsciLexerXML_defaultEolFill, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerXML_defaultEolFill)},
    {SIP_MLNAME_CAST(sipName_defaultFont), meth_QsciLexerXML_defaultFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerXML_defaultFont)},
    {SIP_MLNAME_CAST(sipName_defaultPaper), meth_QsciLexerXML_defaultPaper, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerXML_defaultPaper)},
    {SIP_MLNAME_CAST(sipName_keywords), meth_QsciLexerXML_keywords, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerXML_keywords)},
    {SIP_MLNAME_CAST(sipName_language), meth_QsciLexerXML_language, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerXML_language)},
    {SIP_MLNAME_CAST(sipName_lexer), meth_QsciLexerXML_lexer, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerXML_lexer)},
    {SIP_MLNAME_CAST(sipName_readProperties), meth_QsciLexerXML_readProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerXML_readProperties)},
    {SIP_MLNAME_CAST(sipName_refreshProperties), meth_QsciLexerXML_refreshProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerXML_refreshProperties)},
    {SIP_MLNAME_CAST(sipName_scriptsStyled), meth_QsciLexerXML_scriptsStyled, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerXML_scriptsStyled)},
    {SIP_MLNAME_CAST(sipName_setScriptsStyled), meth_QsciLexerXML_setScriptsStyled, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerXML_setScriptsStyled)},
    {SIP_MLNAME_CAST(sipName_writeProperties), meth_QsciLexerXML_writeProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerXML_writeProperties)}
};

PyDoc_STRVAR(doc_QsciLexerXML, "\1QsciLexerXML(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_Qsci_QsciLexerXML = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QsciLexerXML,
        {0}
    },
    {
        sipNameNr_QsciLexerXML,
        {0, 0, 1},
        12, methods_QsciLexerXML,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QsciLexerXML,
    -1,
    -1,
    supers_QsciLexerXML,
    0,
    init_type_QsciLexerXML,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QsciLexerXML,
    0,
    0,
    0,
    release_QsciLexerXML,
    cast_QsciLexerXML,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QsciLexerXML::staticMetaObject,
    0,
    0
};
