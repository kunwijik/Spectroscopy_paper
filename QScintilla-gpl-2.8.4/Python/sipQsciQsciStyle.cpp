/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.3 on Mon Sep 22 18:00:47 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of QScintilla.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQsci.h"

#line 29 "sip/qscistyle.sip"
#include <Qsci/qscistyle.h>
#line 34 "./sipQsciQsciStyle.cpp"

#line 36 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 38 "./sipQsciQsciStyle.cpp"
#line 35 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qcolor.sip"
#include <qcolor.h>
#line 41 "./sipQsciQsciStyle.cpp"
#line 35 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qfont.sip"
#include <qfont.h>
#line 44 "./sipQsciQsciStyle.cpp"


PyDoc_STRVAR(doc_QsciStyle_style, "QsciStyle.style() -> int");

extern "C" {static PyObject *meth_QsciStyle_style(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciStyle, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->style();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_style, doc_QsciStyle_style);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_setDescription, "QsciStyle.setDescription(QString)");

extern "C" {static PyObject *meth_QsciStyle_setDescription(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_setDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciStyle, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDescription(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_setDescription, doc_QsciStyle_setDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_description, "QsciStyle.description() -> QString");

extern "C" {static PyObject *meth_QsciStyle_description(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciStyle, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->description());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_description, doc_QsciStyle_description);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_setColor, "QsciStyle.setColor(QColor)");

extern "C" {static PyObject *meth_QsciStyle_setColor(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;
        QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciStyle, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setColor(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_setColor, doc_QsciStyle_setColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_color, "QsciStyle.color() -> QColor");

extern "C" {static PyObject *meth_QsciStyle_color(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciStyle, &sipCpp))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->color());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_color, doc_QsciStyle_color);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_setPaper, "QsciStyle.setPaper(QColor)");

extern "C" {static PyObject *meth_QsciStyle_setPaper(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_setPaper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;
        QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QsciStyle, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setPaper(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_setPaper, doc_QsciStyle_setPaper);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_paper, "QsciStyle.paper() -> QColor");

extern "C" {static PyObject *meth_QsciStyle_paper(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_paper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciStyle, &sipCpp))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->paper());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_paper, doc_QsciStyle_paper);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_setFont, "QsciStyle.setFont(QFont)");

extern "C" {static PyObject *meth_QsciStyle_setFont(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;
        QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QsciStyle, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->setFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_setFont, doc_QsciStyle_setFont);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_font, "QsciStyle.font() -> QFont");

extern "C" {static PyObject *meth_QsciStyle_font(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciStyle, &sipCpp))
        {
            QFont*sipRes;

            sipRes = new QFont(sipCpp->font());

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_font, doc_QsciStyle_font);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_setEolFill, "QsciStyle.setEolFill(bool)");

extern "C" {static PyObject *meth_QsciStyle_setEolFill(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_setEolFill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciStyle, &sipCpp, &a0))
        {
            sipCpp->setEolFill(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_setEolFill, doc_QsciStyle_setEolFill);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_eolFill, "QsciStyle.eolFill() -> bool");

extern "C" {static PyObject *meth_QsciStyle_eolFill(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_eolFill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciStyle, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->eolFill();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_eolFill, doc_QsciStyle_eolFill);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_setTextCase, "QsciStyle.setTextCase(QsciStyle.TextCase)");

extern "C" {static PyObject *meth_QsciStyle_setTextCase(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_setTextCase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciStyle::TextCase a0;
        QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QsciStyle, &sipCpp, sipType_QsciStyle_TextCase, &a0))
        {
            sipCpp->setTextCase(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_setTextCase, doc_QsciStyle_setTextCase);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_textCase, "QsciStyle.textCase() -> QsciStyle.TextCase");

extern "C" {static PyObject *meth_QsciStyle_textCase(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_textCase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciStyle, &sipCpp))
        {
            QsciStyle::TextCase sipRes;

            sipRes = sipCpp->textCase();

            return sipConvertFromEnum(sipRes,sipType_QsciStyle_TextCase);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_textCase, doc_QsciStyle_textCase);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_setVisible, "QsciStyle.setVisible(bool)");

extern "C" {static PyObject *meth_QsciStyle_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciStyle, &sipCpp, &a0))
        {
            sipCpp->setVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_setVisible, doc_QsciStyle_setVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_visible, "QsciStyle.visible() -> bool");

extern "C" {static PyObject *meth_QsciStyle_visible(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_visible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciStyle, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->visible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_visible, doc_QsciStyle_visible);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_setChangeable, "QsciStyle.setChangeable(bool)");

extern "C" {static PyObject *meth_QsciStyle_setChangeable(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_setChangeable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciStyle, &sipCpp, &a0))
        {
            sipCpp->setChangeable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_setChangeable, doc_QsciStyle_setChangeable);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_changeable, "QsciStyle.changeable() -> bool");

extern "C" {static PyObject *meth_QsciStyle_changeable(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_changeable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciStyle, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->changeable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_changeable, doc_QsciStyle_changeable);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_setHotspot, "QsciStyle.setHotspot(bool)");

extern "C" {static PyObject *meth_QsciStyle_setHotspot(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_setHotspot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciStyle, &sipCpp, &a0))
        {
            sipCpp->setHotspot(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_setHotspot, doc_QsciStyle_setHotspot);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_hotspot, "QsciStyle.hotspot() -> bool");

extern "C" {static PyObject *meth_QsciStyle_hotspot(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_hotspot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciStyle, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hotspot();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_hotspot, doc_QsciStyle_hotspot);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyle_refresh, "QsciStyle.refresh()");

extern "C" {static PyObject *meth_QsciStyle_refresh(PyObject *, PyObject *);}
static PyObject *meth_QsciStyle_refresh(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciStyle, &sipCpp))
        {
            sipCpp->refresh();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyle, sipName_refresh, doc_QsciStyle_refresh);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QsciStyle(void *, const sipTypeDef *);}
static void *cast_QsciStyle(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QsciStyle)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QsciStyle(void *, int);}
static void release_QsciStyle(void *sipCppV,int)
{
    delete reinterpret_cast<QsciStyle *>(sipCppV);
}


extern "C" {static void assign_QsciStyle(void *, SIP_SSIZE_T, const void *);}
static void assign_QsciStyle(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QsciStyle *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QsciStyle *>(sipSrc);
}


extern "C" {static void *array_QsciStyle(SIP_SSIZE_T);}
static void *array_QsciStyle(SIP_SSIZE_T sipNrElem)
{
    return new QsciStyle[sipNrElem];
}


extern "C" {static void *copy_QsciStyle(const void *, SIP_SSIZE_T);}
static void *copy_QsciStyle(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QsciStyle(reinterpret_cast<const QsciStyle *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QsciStyle(sipSimpleWrapper *);}
static void dealloc_QsciStyle(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QsciStyle(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QsciStyle(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QsciStyle(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QsciStyle *sipCpp = 0;

    {
        int a0 = -1;

        static const char *sipKwdList[] = {
            sipName_style,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|i", &a0))
        {
            sipCpp = new QsciStyle(a0);

            return sipCpp;
        }
    }

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        const QColor* a2;
        int a2State = 0;
        const QColor* a3;
        int a3State = 0;
        const QFont* a4;
        bool a5 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_eolFill,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "iJ1J1J1J9|b", &a0, sipType_QString,&a1, &a1State, sipType_QColor, &a2, &a2State, sipType_QColor, &a3, &a3State, sipType_QFont, &a4, &a5))
        {
            sipCpp = new QsciStyle(a0,*a1,*a2,*a3,*a4,a5);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QColor *>(a2),sipType_QColor,a2State);
            sipReleaseType(const_cast<QColor *>(a3),sipType_QColor,a3State);

            return sipCpp;
        }
    }

    {
        const QsciStyle* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QsciStyle, &a0))
        {
            sipCpp = new QsciStyle(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QsciStyle[] = {
    {SIP_MLNAME_CAST(sipName_changeable), meth_QsciStyle_changeable, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_changeable)},
    {SIP_MLNAME_CAST(sipName_color), meth_QsciStyle_color, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_color)},
    {SIP_MLNAME_CAST(sipName_description), meth_QsciStyle_description, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_description)},
    {SIP_MLNAME_CAST(sipName_eolFill), meth_QsciStyle_eolFill, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_eolFill)},
    {SIP_MLNAME_CAST(sipName_font), meth_QsciStyle_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_font)},
    {SIP_MLNAME_CAST(sipName_hotspot), meth_QsciStyle_hotspot, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_hotspot)},
    {SIP_MLNAME_CAST(sipName_paper), meth_QsciStyle_paper, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_paper)},
    {SIP_MLNAME_CAST(sipName_refresh), meth_QsciStyle_refresh, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_refresh)},
    {SIP_MLNAME_CAST(sipName_setChangeable), meth_QsciStyle_setChangeable, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_setChangeable)},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QsciStyle_setColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_setColor)},
    {SIP_MLNAME_CAST(sipName_setDescription), meth_QsciStyle_setDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_setDescription)},
    {SIP_MLNAME_CAST(sipName_setEolFill), meth_QsciStyle_setEolFill, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_setEolFill)},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QsciStyle_setFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_setFont)},
    {SIP_MLNAME_CAST(sipName_setHotspot), meth_QsciStyle_setHotspot, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_setHotspot)},
    {SIP_MLNAME_CAST(sipName_setPaper), meth_QsciStyle_setPaper, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_setPaper)},
    {SIP_MLNAME_CAST(sipName_setTextCase), meth_QsciStyle_setTextCase, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_setTextCase)},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QsciStyle_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_setVisible)},
    {SIP_MLNAME_CAST(sipName_style), meth_QsciStyle_style, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_style)},
    {SIP_MLNAME_CAST(sipName_textCase), meth_QsciStyle_textCase, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_textCase)},
    {SIP_MLNAME_CAST(sipName_visible), meth_QsciStyle_visible, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyle_visible)}
};

static sipEnumMemberDef enummembers_QsciStyle[] = {
    {sipName_LowerCase, static_cast<int>(QsciStyle::LowerCase), 68},
    {sipName_OriginalCase, static_cast<int>(QsciStyle::OriginalCase), 68},
    {sipName_UpperCase, static_cast<int>(QsciStyle::UpperCase), 68},
};

PyDoc_STRVAR(doc_QsciStyle, "\1QsciStyle(int style=-1)\n"
    "QsciStyle(int, QString, QColor, QColor, QFont, bool eolFill=False)\n"
    "QsciStyle(QsciStyle)");


pyqt4ClassTypeDef sipTypeDef_Qsci_QsciStyle = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QsciStyle,
        {0}
    },
    {
        sipNameNr_QsciStyle,
        {0, 0, 1},
        20, methods_QsciStyle,
        3, enummembers_QsciStyle,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QsciStyle,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_type_QsciStyle,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QsciStyle,
    assign_QsciStyle,
    array_QsciStyle,
    copy_QsciStyle,
    release_QsciStyle,
    cast_QsciStyle,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
