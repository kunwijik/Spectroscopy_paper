/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.3 on Mon Sep 22 18:00:47 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of QScintilla.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQsci.h"

#line 29 "sip/qscistyledtext.sip"
#include <Qsci/qscistyledtext.h>
#line 34 "./sipQsciQsciStyledText.cpp"

#line 36 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 38 "./sipQsciQsciStyledText.cpp"
#line 29 "sip/qscistyle.sip"
#include <Qsci/qscistyle.h>
#line 41 "./sipQsciQsciStyledText.cpp"


PyDoc_STRVAR(doc_QsciStyledText_text, "QsciStyledText.text() -> QString");

extern "C" {static PyObject *meth_QsciStyledText_text(PyObject *, PyObject *);}
static PyObject *meth_QsciStyledText_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciStyledText *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciStyledText, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyledText, sipName_text, doc_QsciStyledText_text);

    return NULL;
}


PyDoc_STRVAR(doc_QsciStyledText_style, "QsciStyledText.style() -> int");

extern "C" {static PyObject *meth_QsciStyledText_style(PyObject *, PyObject *);}
static PyObject *meth_QsciStyledText_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciStyledText *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciStyledText, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->style();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciStyledText, sipName_style, doc_QsciStyledText_style);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QsciStyledText(void *, const sipTypeDef *);}
static void *cast_QsciStyledText(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QsciStyledText)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QsciStyledText(void *, int);}
static void release_QsciStyledText(void *sipCppV,int)
{
    delete reinterpret_cast<QsciStyledText *>(sipCppV);
}


extern "C" {static void dealloc_QsciStyledText(sipSimpleWrapper *);}
static void dealloc_QsciStyledText(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QsciStyledText(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QsciStyledText(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QsciStyledText(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QsciStyledText *sipCpp = 0;

    {
        const QString* a0;
        int a0State = 0;
        int a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1i", sipType_QString,&a0, &a0State, &a1))
        {
            sipCpp = new QsciStyledText(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QsciStyle* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1J9", sipType_QString,&a0, &a0State, sipType_QsciStyle, &a1))
        {
            sipCpp = new QsciStyledText(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const QsciStyledText* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QsciStyledText, &a0))
        {
            sipCpp = new QsciStyledText(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QsciStyledText[] = {
    {SIP_MLNAME_CAST(sipName_style), meth_QsciStyledText_style, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyledText_style)},
    {SIP_MLNAME_CAST(sipName_text), meth_QsciStyledText_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciStyledText_text)}
};

PyDoc_STRVAR(doc_QsciStyledText, "\1QsciStyledText(QString, int)\n"
    "QsciStyledText(QString, QsciStyle)\n"
    "QsciStyledText(QsciStyledText)");


pyqt4ClassTypeDef sipTypeDef_Qsci_QsciStyledText = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QsciStyledText,
        {0}
    },
    {
        sipNameNr_QsciStyledText,
        {0, 0, 1},
        2, methods_QsciStyledText,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QsciStyledText,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_type_QsciStyledText,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QsciStyledText,
    0,
    0,
    0,
    release_QsciStyledText,
    cast_QsciStyledText,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
