/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.3 on Mon Sep 22 18:00:47 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of QScintilla.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQsci.h"

#line 29 "sip/qscidocument.sip"
#include <Qsci/qscidocument.h>
#line 34 "./sipQsciQsciDocument.cpp"



class sipQsciDocument : public QsciDocument
{
public:
    sipQsciDocument();
    sipQsciDocument(const QsciDocument&);
    ~sipQsciDocument();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQsciDocument(const sipQsciDocument &);
    sipQsciDocument &operator = (const sipQsciDocument &);
};

sipQsciDocument::sipQsciDocument(): QsciDocument(), sipPySelf(0)
{
}

sipQsciDocument::sipQsciDocument(const QsciDocument& a0): QsciDocument(a0), sipPySelf(0)
{
}

sipQsciDocument::~sipQsciDocument()
{
    sipCommonDtor(sipPySelf);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QsciDocument(void *, const sipTypeDef *);}
static void *cast_QsciDocument(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QsciDocument)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QsciDocument(void *, int);}
static void release_QsciDocument(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQsciDocument *>(sipCppV);
    else
        delete reinterpret_cast<QsciDocument *>(sipCppV);
}


extern "C" {static void assign_QsciDocument(void *, SIP_SSIZE_T, const void *);}
static void assign_QsciDocument(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QsciDocument *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QsciDocument *>(sipSrc);
}


extern "C" {static void *array_QsciDocument(SIP_SSIZE_T);}
static void *array_QsciDocument(SIP_SSIZE_T sipNrElem)
{
    return new QsciDocument[sipNrElem];
}


extern "C" {static void *copy_QsciDocument(const void *, SIP_SSIZE_T);}
static void *copy_QsciDocument(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QsciDocument(reinterpret_cast<const QsciDocument *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QsciDocument(sipSimpleWrapper *);}
static void dealloc_QsciDocument(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQsciDocument *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QsciDocument(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QsciDocument(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QsciDocument(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQsciDocument *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQsciDocument();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QsciDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QsciDocument, &a0))
        {
            sipCpp = new sipQsciDocument(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}

PyDoc_STRVAR(doc_QsciDocument, "\1QsciDocument()\n"
    "QsciDocument(QsciDocument)");


pyqt4ClassTypeDef sipTypeDef_Qsci_QsciDocument = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QsciDocument,
        {0}
    },
    {
        sipNameNr_QsciDocument,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QsciDocument,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_type_QsciDocument,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QsciDocument,
    assign_QsciDocument,
    array_QsciDocument,
    copy_QsciDocument,
    release_QsciDocument,
    cast_QsciDocument,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
