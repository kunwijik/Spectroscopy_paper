/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.3 on Mon Sep 22 18:00:47 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of QScintilla.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQsci.h"

#line 29 "sip/qscilexerhtml.sip"
#include <Qsci/qscilexerhtml.h>
#line 34 "./sipQsciQsciLexerHTML.cpp"

#line 34 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "./sipQsciQsciLexerHTML.cpp"
#line 31 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qsettings.sip"
#include <qsettings.h>
#line 41 "./sipQsciQsciLexerHTML.cpp"
#line 36 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 44 "./sipQsciQsciLexerHTML.cpp"
#line 35 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qcolor.sip"
#include <qcolor.h>
#line 47 "./sipQsciQsciLexerHTML.cpp"
#line 35 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qfont.sip"
#include <qfont.h>
#line 50 "./sipQsciQsciLexerHTML.cpp"
#line 29 "sip/qsciabstractapis.sip"
#include <Qsci/qsciabstractapis.h>
#line 53 "./sipQsciQsciLexerHTML.cpp"
#line 29 "sip/qsciscintilla.sip"
#include <Qsci/qsciscintilla.h>
#line 56 "./sipQsciQsciLexerHTML.cpp"
#line 31 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "./sipQsciQsciLexerHTML.cpp"
#line 355 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "./sipQsciQsciLexerHTML.cpp"
#line 338 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "./sipQsciQsciLexerHTML.cpp"
#line 274 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 68 "./sipQsciQsciLexerHTML.cpp"
#line 33 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 71 "./sipQsciQsciLexerHTML.cpp"
#line 37 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 74 "./sipQsciQsciLexerHTML.cpp"
#line 35 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77 "./sipQsciQsciLexerHTML.cpp"
#line 120 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 80 "./sipQsciQsciLexerHTML.cpp"
#line 31 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 83 "./sipQsciQsciLexerHTML.cpp"
#line 35 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 86 "./sipQsciQsciLexerHTML.cpp"
#line 31 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 89 "./sipQsciQsciLexerHTML.cpp"


class sipQsciLexerHTML : public QsciLexerHTML
{
public:
    sipQsciLexerHTML(QObject*);
    virtual ~sipQsciLexerHTML();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool writeProperties(QSettings&,const QString&) const;
    bool readProperties(QSettings&,const QString&);
    void setPaper(const QColor&,int);
    void setFont(const QFont&,int);
    void setEolFill(bool,int);
    void setColor(const QColor&,int);
    void setAutoIndentStyle(int);
    const char* wordCharacters() const;
    int styleBitsNeeded() const;
    void refreshProperties();
    QColor defaultPaper(int) const;
    QFont defaultFont(int) const;
    bool defaultEolFill(int) const;
    QColor defaultColor(int) const;
    QColor paper(int) const;
    QString description(int) const;
    const char* keywords(int) const;
    QFont font(int) const;
    bool eolFill(int) const;
    QColor color(int) const;
    int lexerId() const;
    const char* lexer() const;
    const char* language() const;
    void setCaseSensitiveTags(bool);
    void setFoldPreprocessor(bool);
    void setFoldCompact(bool);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQsciLexerHTML(const sipQsciLexerHTML &);
    sipQsciLexerHTML &operator = (const sipQsciLexerHTML &);

    char sipPyMethods[33];
};

sipQsciLexerHTML::sipQsciLexerHTML(QObject*a0): QsciLexerHTML(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQsciLexerHTML::~sipQsciLexerHTML()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQsciLexerHTML::metaObject() const
{
    return sip_Qsci_qt_metaobject(sipPySelf,sipType_QsciLexerHTML);
}

int sipQsciLexerHTML::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QsciLexerHTML::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_Qsci_qt_metacall(sipPySelf,sipType_QsciLexerHTML,_c,_id,_a);

    return _id;
}

void *sipQsciLexerHTML::qt_metacast(const char *_clname)
{
    return (sip_Qsci_qt_metacast(sipPySelf, sipType_QsciLexerHTML, _clname)) ? this : QsciLexerHTML::qt_metacast(_clname);
}

void sipQsciLexerHTML::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QsciLexerHTML::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_Qsci_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerHTML::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QsciLexerHTML::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_Qsci_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerHTML::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QsciLexerHTML::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_Qsci_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerHTML::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QsciLexerHTML::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_Qsci_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerHTML::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QsciLexerHTML::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_Qsci_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQsciLexerHTML::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QsciLexerHTML::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_Qsci_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQsciLexerHTML::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QsciLexerHTML::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_Qsci_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQsciLexerHTML::writeProperties(QSettings& a0,const QString& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_writeProperties);

    if (!sipMeth)
        return QsciLexerHTML::writeProperties(a0,a1);

    extern bool sipVH_Qsci_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSettings&,const QString&);

    return sipVH_Qsci_7(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQsciLexerHTML::readProperties(QSettings& a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_readProperties);

    if (!sipMeth)
        return QsciLexerHTML::readProperties(a0,a1);

    extern bool sipVH_Qsci_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSettings&,const QString&);

    return sipVH_Qsci_7(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerHTML::setPaper(const QColor& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_setPaper);

    if (!sipMeth)
    {
        QsciLexerHTML::setPaper(a0,a1);
        return;
    }

    extern void sipVH_Qsci_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QColor&,int);

    sipVH_Qsci_8(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerHTML::setFont(const QFont& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_setFont);

    if (!sipMeth)
    {
        QsciLexerHTML::setFont(a0,a1);
        return;
    }

    extern void sipVH_Qsci_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFont&,int);

    sipVH_Qsci_9(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerHTML::setEolFill(bool a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_setEolFill);

    if (!sipMeth)
    {
        QsciLexerHTML::setEolFill(a0,a1);
        return;
    }

    extern void sipVH_Qsci_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool,int);

    sipVH_Qsci_10(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerHTML::setColor(const QColor& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_setColor);

    if (!sipMeth)
    {
        QsciLexerHTML::setColor(a0,a1);
        return;
    }

    extern void sipVH_Qsci_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QColor&,int);

    sipVH_Qsci_8(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerHTML::setAutoIndentStyle(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_setAutoIndentStyle);

    if (!sipMeth)
    {
        QsciLexerHTML::setAutoIndentStyle(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_Qsci_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

const char* sipQsciLexerHTML::wordCharacters() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_wordCharacters);

    if (!sipMeth)
        return QsciLexerHTML::wordCharacters();

    extern const char* sipVH_Qsci_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_11(sipGILState, 0, sipPySelf, sipMeth, -94);
}

int sipQsciLexerHTML::styleBitsNeeded() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_styleBitsNeeded);

    if (!sipMeth)
        return QsciLexerHTML::styleBitsNeeded();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_Qsci_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQsciLexerHTML::refreshProperties()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_refreshProperties);

    if (!sipMeth)
    {
        QsciLexerHTML::refreshProperties();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

QColor sipQsciLexerHTML::defaultPaper(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_defaultPaper);

    if (!sipMeth)
        return QsciLexerHTML::defaultPaper(a0);

    extern QColor sipVH_Qsci_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QFont sipQsciLexerHTML::defaultFont(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_defaultFont);

    if (!sipMeth)
        return QsciLexerHTML::defaultFont(a0);

    extern QFont sipVH_Qsci_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQsciLexerHTML::defaultEolFill(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_defaultEolFill);

    if (!sipMeth)
        return QsciLexerHTML::defaultEolFill(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_23)(sipModuleAPI_Qsci_QtCore->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QColor sipQsciLexerHTML::defaultColor(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_defaultColor);

    if (!sipMeth)
        return QsciLexerHTML::defaultColor(a0);

    extern QColor sipVH_Qsci_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QColor sipQsciLexerHTML::paper(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_paper);

    if (!sipMeth)
        return QsciLexerHTML::paper(a0);

    extern QColor sipVH_Qsci_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QString sipQsciLexerHTML::description(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_description);

    if (!sipMeth)
        return QsciLexerHTML::description(a0);

    typedef QString (*sipVH_QtGui_111)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtGui_111)(sipModuleAPI_Qsci_QtGui->em_virthandlers[111]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

const char* sipQsciLexerHTML::keywords(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_keywords);

    if (!sipMeth)
        return QsciLexerHTML::keywords(a0);

    typedef const char* (*sipVH_QtGui_150)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, int);

    return ((sipVH_QtGui_150)(sipModuleAPI_Qsci_QtGui->em_virthandlers[150]))(sipGILState, 0, sipPySelf, sipMeth, a0, -95);
}

QFont sipQsciLexerHTML::font(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_font);

    if (!sipMeth)
        return QsciLexerHTML::font(a0);

    extern QFont sipVH_Qsci_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQsciLexerHTML::eolFill(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_eolFill);

    if (!sipMeth)
        return QsciLexerHTML::eolFill(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_23)(sipModuleAPI_Qsci_QtCore->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QColor sipQsciLexerHTML::color(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_color);

    if (!sipMeth)
        return QsciLexerHTML::color(a0);

    extern QColor sipVH_Qsci_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQsciLexerHTML::lexerId() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_lexerId);

    if (!sipMeth)
        return QsciLexerHTML::lexerId();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_Qsci_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

const char* sipQsciLexerHTML::lexer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_lexer);

    if (!sipMeth)
        return QsciLexerHTML::lexer();

    extern const char* sipVH_Qsci_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_11(sipGILState, 0, sipPySelf, sipMeth, -96);
}

const char* sipQsciLexerHTML::language() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_language);

    if (!sipMeth)
        return QsciLexerHTML::language();

    extern const char* sipVH_Qsci_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_11(sipGILState, 0, sipPySelf, sipMeth, -97);
}

void sipQsciLexerHTML::setCaseSensitiveTags(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_setCaseSensitiveTags);

    if (!sipMeth)
    {
        QsciLexerHTML::setCaseSensitiveTags(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerHTML::setFoldPreprocessor(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_setFoldPreprocessor);

    if (!sipMeth)
    {
        QsciLexerHTML::setFoldPreprocessor(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerHTML::setFoldCompact(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_setFoldCompact);

    if (!sipMeth)
    {
        QsciLexerHTML::setFoldCompact(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QsciLexerHTML_language, "QsciLexerHTML.language() -> str");

extern "C" {static PyObject *meth_QsciLexerHTML_language(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_language(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerHTML, &sipCpp))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerHTML::language() : sipCpp->language());

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_language, doc_QsciLexerHTML_language);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_lexer, "QsciLexerHTML.lexer() -> str");

extern "C" {static PyObject *meth_QsciLexerHTML_lexer(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_lexer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerHTML, &sipCpp))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerHTML::lexer() : sipCpp->lexer());

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_lexer, doc_QsciLexerHTML_lexer);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_defaultColor, "QsciLexerHTML.defaultColor(int) -> QColor");

extern "C" {static PyObject *meth_QsciLexerHTML_defaultColor(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_defaultColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerHTML, &sipCpp, &a0))
        {
            QColor*sipRes;

            sipRes = new QColor((sipSelfWasArg ? sipCpp->QsciLexerHTML::defaultColor(a0) : sipCpp->defaultColor(a0)));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_defaultColor, doc_QsciLexerHTML_defaultColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_defaultEolFill, "QsciLexerHTML.defaultEolFill(int) -> bool");

extern "C" {static PyObject *meth_QsciLexerHTML_defaultEolFill(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_defaultEolFill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerHTML, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerHTML::defaultEolFill(a0) : sipCpp->defaultEolFill(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_defaultEolFill, doc_QsciLexerHTML_defaultEolFill);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_defaultFont, "QsciLexerHTML.defaultFont(int) -> QFont");

extern "C" {static PyObject *meth_QsciLexerHTML_defaultFont(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_defaultFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerHTML, &sipCpp, &a0))
        {
            QFont*sipRes;

            sipRes = new QFont((sipSelfWasArg ? sipCpp->QsciLexerHTML::defaultFont(a0) : sipCpp->defaultFont(a0)));

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_defaultFont, doc_QsciLexerHTML_defaultFont);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_defaultPaper, "QsciLexerHTML.defaultPaper(int) -> QColor");

extern "C" {static PyObject *meth_QsciLexerHTML_defaultPaper(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_defaultPaper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerHTML, &sipCpp, &a0))
        {
            QColor*sipRes;

            sipRes = new QColor((sipSelfWasArg ? sipCpp->QsciLexerHTML::defaultPaper(a0) : sipCpp->defaultPaper(a0)));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_defaultPaper, doc_QsciLexerHTML_defaultPaper);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_keywords, "QsciLexerHTML.keywords(int) -> str");

extern "C" {static PyObject *meth_QsciLexerHTML_keywords(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_keywords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerHTML, &sipCpp, &a0))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerHTML::keywords(a0) : sipCpp->keywords(a0));

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_keywords, doc_QsciLexerHTML_keywords);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_description, "QsciLexerHTML.description(int) -> QString");

extern "C" {static PyObject *meth_QsciLexerHTML_description(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerHTML, &sipCpp, &a0))
        {
            QString*sipRes;

            sipRes = new QString((sipSelfWasArg ? sipCpp->QsciLexerHTML::description(a0) : sipCpp->description(a0)));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_description, doc_QsciLexerHTML_description);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_wordCharacters, "QsciLexerHTML.wordCharacters() -> str");

extern "C" {static PyObject *meth_QsciLexerHTML_wordCharacters(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_wordCharacters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerHTML, &sipCpp))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerHTML::wordCharacters() : sipCpp->wordCharacters());

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_wordCharacters, doc_QsciLexerHTML_wordCharacters);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_refreshProperties, "QsciLexerHTML.refreshProperties()");

extern "C" {static PyObject *meth_QsciLexerHTML_refreshProperties(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_refreshProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerHTML, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QsciLexerHTML::refreshProperties() : sipCpp->refreshProperties());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_refreshProperties, doc_QsciLexerHTML_refreshProperties);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_caseSensitiveTags, "QsciLexerHTML.caseSensitiveTags() -> bool");

extern "C" {static PyObject *meth_QsciLexerHTML_caseSensitiveTags(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_caseSensitiveTags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerHTML, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->caseSensitiveTags();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_caseSensitiveTags, doc_QsciLexerHTML_caseSensitiveTags);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_setDjangoTemplates, "QsciLexerHTML.setDjangoTemplates(bool)");

extern "C" {static PyObject *meth_QsciLexerHTML_setDjangoTemplates(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_setDjangoTemplates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerHTML, &sipCpp, &a0))
        {
            sipCpp->setDjangoTemplates(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_setDjangoTemplates, doc_QsciLexerHTML_setDjangoTemplates);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_djangoTemplates, "QsciLexerHTML.djangoTemplates() -> bool");

extern "C" {static PyObject *meth_QsciLexerHTML_djangoTemplates(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_djangoTemplates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerHTML, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->djangoTemplates();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_djangoTemplates, doc_QsciLexerHTML_djangoTemplates);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_foldCompact, "QsciLexerHTML.foldCompact() -> bool");

extern "C" {static PyObject *meth_QsciLexerHTML_foldCompact(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_foldCompact(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerHTML, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->foldCompact();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_foldCompact, doc_QsciLexerHTML_foldCompact);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_foldPreprocessor, "QsciLexerHTML.foldPreprocessor() -> bool");

extern "C" {static PyObject *meth_QsciLexerHTML_foldPreprocessor(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_foldPreprocessor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerHTML, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->foldPreprocessor();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_foldPreprocessor, doc_QsciLexerHTML_foldPreprocessor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_setFoldScriptComments, "QsciLexerHTML.setFoldScriptComments(bool)");

extern "C" {static PyObject *meth_QsciLexerHTML_setFoldScriptComments(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_setFoldScriptComments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerHTML, &sipCpp, &a0))
        {
            sipCpp->setFoldScriptComments(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_setFoldScriptComments, doc_QsciLexerHTML_setFoldScriptComments);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_foldScriptComments, "QsciLexerHTML.foldScriptComments() -> bool");

extern "C" {static PyObject *meth_QsciLexerHTML_foldScriptComments(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_foldScriptComments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerHTML, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->foldScriptComments();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_foldScriptComments, doc_QsciLexerHTML_foldScriptComments);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_setFoldScriptHeredocs, "QsciLexerHTML.setFoldScriptHeredocs(bool)");

extern "C" {static PyObject *meth_QsciLexerHTML_setFoldScriptHeredocs(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_setFoldScriptHeredocs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerHTML, &sipCpp, &a0))
        {
            sipCpp->setFoldScriptHeredocs(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_setFoldScriptHeredocs, doc_QsciLexerHTML_setFoldScriptHeredocs);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_foldScriptHeredocs, "QsciLexerHTML.foldScriptHeredocs() -> bool");

extern "C" {static PyObject *meth_QsciLexerHTML_foldScriptHeredocs(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_foldScriptHeredocs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerHTML, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->foldScriptHeredocs();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_foldScriptHeredocs, doc_QsciLexerHTML_foldScriptHeredocs);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_setMakoTemplates, "QsciLexerHTML.setMakoTemplates(bool)");

extern "C" {static PyObject *meth_QsciLexerHTML_setMakoTemplates(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_setMakoTemplates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerHTML, &sipCpp, &a0))
        {
            sipCpp->setMakoTemplates(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_setMakoTemplates, doc_QsciLexerHTML_setMakoTemplates);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_makoTemplates, "QsciLexerHTML.makoTemplates() -> bool");

extern "C" {static PyObject *meth_QsciLexerHTML_makoTemplates(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_makoTemplates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerHTML, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->makoTemplates();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_makoTemplates, doc_QsciLexerHTML_makoTemplates);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_setFoldCompact, "QsciLexerHTML.setFoldCompact(bool)");

extern "C" {static PyObject *meth_QsciLexerHTML_setFoldCompact(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_setFoldCompact(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerHTML, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QsciLexerHTML::setFoldCompact(a0) : sipCpp->setFoldCompact(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_setFoldCompact, doc_QsciLexerHTML_setFoldCompact);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_setFoldPreprocessor, "QsciLexerHTML.setFoldPreprocessor(bool)");

extern "C" {static PyObject *meth_QsciLexerHTML_setFoldPreprocessor(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_setFoldPreprocessor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerHTML, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QsciLexerHTML::setFoldPreprocessor(a0) : sipCpp->setFoldPreprocessor(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_setFoldPreprocessor, doc_QsciLexerHTML_setFoldPreprocessor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_setCaseSensitiveTags, "QsciLexerHTML.setCaseSensitiveTags(bool)");

extern "C" {static PyObject *meth_QsciLexerHTML_setCaseSensitiveTags(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_setCaseSensitiveTags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerHTML, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QsciLexerHTML::setCaseSensitiveTags(a0) : sipCpp->setCaseSensitiveTags(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_setCaseSensitiveTags, doc_QsciLexerHTML_setCaseSensitiveTags);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_readProperties, "QsciLexerHTML.readProperties(QSettings, QString) -> bool");

extern "C" {static PyObject *meth_QsciLexerHTML_readProperties(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_readProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSettings* a0;
        const QString* a1;
        int a1State = 0;
        QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QsciLexerHTML, &sipCpp, sipType_QSettings, &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerHTML::readProperties(*a0,*a1) : sipCpp->readProperties(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_readProperties, doc_QsciLexerHTML_readProperties);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerHTML_writeProperties, "QsciLexerHTML.writeProperties(QSettings, QString) -> bool");

extern "C" {static PyObject *meth_QsciLexerHTML_writeProperties(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerHTML_writeProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSettings* a0;
        const QString* a1;
        int a1State = 0;
        const QsciLexerHTML *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QsciLexerHTML, &sipCpp, sipType_QSettings, &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerHTML::writeProperties(*a0,*a1) : sipCpp->writeProperties(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerHTML, sipName_writeProperties, doc_QsciLexerHTML_writeProperties);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QsciLexerHTML(void *, const sipTypeDef *);}
static void *cast_QsciLexerHTML(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QsciLexerHTML)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QsciLexer)->ctd_cast((QsciLexer *)(QsciLexerHTML *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QsciLexerHTML(void *, int);}
static void release_QsciLexerHTML(void *sipCppV,int)
{
    QsciLexerHTML *sipCpp = reinterpret_cast<QsciLexerHTML *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QsciLexerHTML(sipSimpleWrapper *);}
static void dealloc_QsciLexerHTML(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQsciLexerHTML *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QsciLexerHTML(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QsciLexerHTML(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QsciLexerHTML(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQsciLexerHTML *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQsciLexerHTML(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QsciLexerHTML[] = {{8, 255, 1}};


static PyMethodDef methods_QsciLexerHTML[] = {
    {SIP_MLNAME_CAST(sipName_caseSensitiveTags), meth_QsciLexerHTML_caseSensitiveTags, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_caseSensitiveTags)},
    {SIP_MLNAME_CAST(sipName_defaultColor), meth_QsciLexerHTML_defaultColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_defaultColor)},
    {SIP_MLNAME_CAST(sipName_defaultEolFill), meth_QsciLexerHTML_defaultEolFill, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_defaultEolFill)},
    {SIP_MLNAME_CAST(sipName_defaultFont), meth_QsciLexerHTML_defaultFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_defaultFont)},
    {SIP_MLNAME_CAST(sipName_defaultPaper), meth_QsciLexerHTML_defaultPaper, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_defaultPaper)},
    {SIP_MLNAME_CAST(sipName_description), meth_QsciLexerHTML_description, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_description)},
    {SIP_MLNAME_CAST(sipName_djangoTemplates), meth_QsciLexerHTML_djangoTemplates, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_djangoTemplates)},
    {SIP_MLNAME_CAST(sipName_foldCompact), meth_QsciLexerHTML_foldCompact, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_foldCompact)},
    {SIP_MLNAME_CAST(sipName_foldPreprocessor), meth_QsciLexerHTML_foldPreprocessor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_foldPreprocessor)},
    {SIP_MLNAME_CAST(sipName_foldScriptComments), meth_QsciLexerHTML_foldScriptComments, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_foldScriptComments)},
    {SIP_MLNAME_CAST(sipName_foldScriptHeredocs), meth_QsciLexerHTML_foldScriptHeredocs, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_foldScriptHeredocs)},
    {SIP_MLNAME_CAST(sipName_keywords), meth_QsciLexerHTML_keywords, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_keywords)},
    {SIP_MLNAME_CAST(sipName_language), meth_QsciLexerHTML_language, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_language)},
    {SIP_MLNAME_CAST(sipName_lexer), meth_QsciLexerHTML_lexer, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_lexer)},
    {SIP_MLNAME_CAST(sipName_makoTemplates), meth_QsciLexerHTML_makoTemplates, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_makoTemplates)},
    {SIP_MLNAME_CAST(sipName_readProperties), meth_QsciLexerHTML_readProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_readProperties)},
    {SIP_MLNAME_CAST(sipName_refreshProperties), meth_QsciLexerHTML_refreshProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_refreshProperties)},
    {SIP_MLNAME_CAST(sipName_setCaseSensitiveTags), meth_QsciLexerHTML_setCaseSensitiveTags, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_setCaseSensitiveTags)},
    {SIP_MLNAME_CAST(sipName_setDjangoTemplates), meth_QsciLexerHTML_setDjangoTemplates, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_setDjangoTemplates)},
    {SIP_MLNAME_CAST(sipName_setFoldCompact), meth_QsciLexerHTML_setFoldCompact, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_setFoldCompact)},
    {SIP_MLNAME_CAST(sipName_setFoldPreprocessor), meth_QsciLexerHTML_setFoldPreprocessor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_setFoldPreprocessor)},
    {SIP_MLNAME_CAST(sipName_setFoldScriptComments), meth_QsciLexerHTML_setFoldScriptComments, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_setFoldScriptComments)},
    {SIP_MLNAME_CAST(sipName_setFoldScriptHeredocs), meth_QsciLexerHTML_setFoldScriptHeredocs, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_setFoldScriptHeredocs)},
    {SIP_MLNAME_CAST(sipName_setMakoTemplates), meth_QsciLexerHTML_setMakoTemplates, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_setMakoTemplates)},
    {SIP_MLNAME_CAST(sipName_wordCharacters), meth_QsciLexerHTML_wordCharacters, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_wordCharacters)},
    {SIP_MLNAME_CAST(sipName_writeProperties), meth_QsciLexerHTML_writeProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerHTML_writeProperties)}
};

static sipEnumMemberDef enummembers_QsciLexerHTML[] = {
    {sipName_ASPAtStart, static_cast<int>(QsciLexerHTML::ASPAtStart), -1},
    {sipName_ASPJavaScriptComment, static_cast<int>(QsciLexerHTML::ASPJavaScriptComment), -1},
    {sipName_ASPJavaScriptCommentDoc, static_cast<int>(QsciLexerHTML::ASPJavaScriptCommentDoc), -1},
    {sipName_ASPJavaScriptCommentLine, static_cast<int>(QsciLexerHTML::ASPJavaScriptCommentLine), -1},
    {sipName_ASPJavaScriptDefault, static_cast<int>(QsciLexerHTML::ASPJavaScriptDefault), -1},
    {sipName_ASPJavaScriptDoubleQuotedString, static_cast<int>(QsciLexerHTML::ASPJavaScriptDoubleQuotedString), -1},
    {sipName_ASPJavaScriptKeyword, static_cast<int>(QsciLexerHTML::ASPJavaScriptKeyword), -1},
    {sipName_ASPJavaScriptNumber, static_cast<int>(QsciLexerHTML::ASPJavaScriptNumber), -1},
    {sipName_ASPJavaScriptRegex, static_cast<int>(QsciLexerHTML::ASPJavaScriptRegex), -1},
    {sipName_ASPJavaScriptSingleQuotedString, static_cast<int>(QsciLexerHTML::ASPJavaScriptSingleQuotedString), -1},
    {sipName_ASPJavaScriptStart, static_cast<int>(QsciLexerHTML::ASPJavaScriptStart), -1},
    {sipName_ASPJavaScriptSymbol, static_cast<int>(QsciLexerHTML::ASPJavaScriptSymbol), -1},
    {sipName_ASPJavaScriptUnclosedString, static_cast<int>(QsciLexerHTML::ASPJavaScriptUnclosedString), -1},
    {sipName_ASPJavaScriptWord, static_cast<int>(QsciLexerHTML::ASPJavaScriptWord), -1},
    {sipName_ASPPythonClassName, static_cast<int>(QsciLexerHTML::ASPPythonClassName), -1},
    {sipName_ASPPythonComment, static_cast<int>(QsciLexerHTML::ASPPythonComment), -1},
    {sipName_ASPPythonDefault, static_cast<int>(QsciLexerHTML::ASPPythonDefault), -1},
    {sipName_ASPPythonDoubleQuotedString, static_cast<int>(QsciLexerHTML::ASPPythonDoubleQuotedString), -1},
    {sipName_ASPPythonFunctionMethodName, static_cast<int>(QsciLexerHTML::ASPPythonFunctionMethodName), -1},
    {sipName_ASPPythonIdentifier, static_cast<int>(QsciLexerHTML::ASPPythonIdentifier), -1},
    {sipName_ASPPythonKeyword, static_cast<int>(QsciLexerHTML::ASPPythonKeyword), -1},
    {sipName_ASPPythonNumber, static_cast<int>(QsciLexerHTML::ASPPythonNumber), -1},
    {sipName_ASPPythonOperator, static_cast<int>(QsciLexerHTML::ASPPythonOperator), -1},
    {sipName_ASPPythonSingleQuotedString, static_cast<int>(QsciLexerHTML::ASPPythonSingleQuotedString), -1},
    {sipName_ASPPythonStart, static_cast<int>(QsciLexerHTML::ASPPythonStart), -1},
    {sipName_ASPPythonTripleDoubleQuotedString, static_cast<int>(QsciLexerHTML::ASPPythonTripleDoubleQuotedString), -1},
    {sipName_ASPPythonTripleSingleQuotedString, static_cast<int>(QsciLexerHTML::ASPPythonTripleSingleQuotedString), -1},
    {sipName_ASPStart, static_cast<int>(QsciLexerHTML::ASPStart), -1},
    {sipName_ASPVBScriptComment, static_cast<int>(QsciLexerHTML::ASPVBScriptComment), -1},
    {sipName_ASPVBScriptDefault, static_cast<int>(QsciLexerHTML::ASPVBScriptDefault), -1},
    {sipName_ASPVBScriptIdentifier, static_cast<int>(QsciLexerHTML::ASPVBScriptIdentifier), -1},
    {sipName_ASPVBScriptKeyword, static_cast<int>(QsciLexerHTML::ASPVBScriptKeyword), -1},
    {sipName_ASPVBScriptNumber, static_cast<int>(QsciLexerHTML::ASPVBScriptNumber), -1},
    {sipName_ASPVBScriptStart, static_cast<int>(QsciLexerHTML::ASPVBScriptStart), -1},
    {sipName_ASPVBScriptString, static_cast<int>(QsciLexerHTML::ASPVBScriptString), -1},
    {sipName_ASPVBScriptUnclosedString, static_cast<int>(QsciLexerHTML::ASPVBScriptUnclosedString), -1},
    {sipName_ASPXCComment, static_cast<int>(QsciLexerHTML::ASPXCComment), -1},
    {sipName_Attribute, static_cast<int>(QsciLexerHTML::Attribute), -1},
    {sipName_CDATA, static_cast<int>(QsciLexerHTML::CDATA), -1},
    {sipName_Default, static_cast<int>(QsciLexerHTML::Default), -1},
    {sipName_Entity, static_cast<int>(QsciLexerHTML::Entity), -1},
    {sipName_HTMLComment, static_cast<int>(QsciLexerHTML::HTMLComment), -1},
    {sipName_HTMLDoubleQuotedString, static_cast<int>(QsciLexerHTML::HTMLDoubleQuotedString), -1},
    {sipName_HTMLNumber, static_cast<int>(QsciLexerHTML::HTMLNumber), -1},
    {sipName_HTMLSingleQuotedString, static_cast<int>(QsciLexerHTML::HTMLSingleQuotedString), -1},
    {sipName_HTMLValue, static_cast<int>(QsciLexerHTML::HTMLValue), -1},
    {sipName_JavaScriptComment, static_cast<int>(QsciLexerHTML::JavaScriptComment), -1},
    {sipName_JavaScriptCommentDoc, static_cast<int>(QsciLexerHTML::JavaScriptCommentDoc), -1},
    {sipName_JavaScriptCommentLine, static_cast<int>(QsciLexerHTML::JavaScriptCommentLine), -1},
    {sipName_JavaScriptDefault, static_cast<int>(QsciLexerHTML::JavaScriptDefault), -1},
    {sipName_JavaScriptDoubleQuotedString, static_cast<int>(QsciLexerHTML::JavaScriptDoubleQuotedString), -1},
    {sipName_JavaScriptKeyword, static_cast<int>(QsciLexerHTML::JavaScriptKeyword), -1},
    {sipName_JavaScriptNumber, static_cast<int>(QsciLexerHTML::JavaScriptNumber), -1},
    {sipName_JavaScriptRegex, static_cast<int>(QsciLexerHTML::JavaScriptRegex), -1},
    {sipName_JavaScriptSingleQuotedString, static_cast<int>(QsciLexerHTML::JavaScriptSingleQuotedString), -1},
    {sipName_JavaScriptStart, static_cast<int>(QsciLexerHTML::JavaScriptStart), -1},
    {sipName_JavaScriptSymbol, static_cast<int>(QsciLexerHTML::JavaScriptSymbol), -1},
    {sipName_JavaScriptUnclosedString, static_cast<int>(QsciLexerHTML::JavaScriptUnclosedString), -1},
    {sipName_JavaScriptWord, static_cast<int>(QsciLexerHTML::JavaScriptWord), -1},
    {sipName_OtherInTag, static_cast<int>(QsciLexerHTML::OtherInTag), -1},
    {sipName_PHPComment, static_cast<int>(QsciLexerHTML::PHPComment), -1},
    {sipName_PHPCommentLine, static_cast<int>(QsciLexerHTML::PHPCommentLine), -1},
    {sipName_PHPDefault, static_cast<int>(QsciLexerHTML::PHPDefault), -1},
    {sipName_PHPDoubleQuotedString, static_cast<int>(QsciLexerHTML::PHPDoubleQuotedString), -1},
    {sipName_PHPDoubleQuotedVariable, static_cast<int>(QsciLexerHTML::PHPDoubleQuotedVariable), -1},
    {sipName_PHPKeyword, static_cast<int>(QsciLexerHTML::PHPKeyword), -1},
    {sipName_PHPNumber, static_cast<int>(QsciLexerHTML::PHPNumber), -1},
    {sipName_PHPOperator, static_cast<int>(QsciLexerHTML::PHPOperator), -1},
    {sipName_PHPSingleQuotedString, static_cast<int>(QsciLexerHTML::PHPSingleQuotedString), -1},
    {sipName_PHPStart, static_cast<int>(QsciLexerHTML::PHPStart), -1},
    {sipName_PHPVariable, static_cast<int>(QsciLexerHTML::PHPVariable), -1},
    {sipName_PythonClassName, static_cast<int>(QsciLexerHTML::PythonClassName), -1},
    {sipName_PythonComment, static_cast<int>(QsciLexerHTML::PythonComment), -1},
    {sipName_PythonDefault, static_cast<int>(QsciLexerHTML::PythonDefault), -1},
    {sipName_PythonDoubleQuotedString, static_cast<int>(QsciLexerHTML::PythonDoubleQuotedString), -1},
    {sipName_PythonFunctionMethodName, static_cast<int>(QsciLexerHTML::PythonFunctionMethodName), -1},
    {sipName_PythonIdentifier, static_cast<int>(QsciLexerHTML::PythonIdentifier), -1},
    {sipName_PythonKeyword, static_cast<int>(QsciLexerHTML::PythonKeyword), -1},
    {sipName_PythonNumber, static_cast<int>(QsciLexerHTML::PythonNumber), -1},
    {sipName_PythonOperator, static_cast<int>(QsciLexerHTML::PythonOperator), -1},
    {sipName_PythonSingleQuotedString, static_cast<int>(QsciLexerHTML::PythonSingleQuotedString), -1},
    {sipName_PythonStart, static_cast<int>(QsciLexerHTML::PythonStart), -1},
    {sipName_PythonTripleDoubleQuotedString, static_cast<int>(QsciLexerHTML::PythonTripleDoubleQuotedString), -1},
    {sipName_PythonTripleSingleQuotedString, static_cast<int>(QsciLexerHTML::PythonTripleSingleQuotedString), -1},
    {sipName_SGMLBlockDefault, static_cast<int>(QsciLexerHTML::SGMLBlockDefault), -1},
    {sipName_SGMLCommand, static_cast<int>(QsciLexerHTML::SGMLCommand), -1},
    {sipName_SGMLComment, static_cast<int>(QsciLexerHTML::SGMLComment), -1},
    {sipName_SGMLDefault, static_cast<int>(QsciLexerHTML::SGMLDefault), -1},
    {sipName_SGMLDoubleQuotedString, static_cast<int>(QsciLexerHTML::SGMLDoubleQuotedString), -1},
    {sipName_SGMLEntity, static_cast<int>(QsciLexerHTML::SGMLEntity), -1},
    {sipName_SGMLError, static_cast<int>(QsciLexerHTML::SGMLError), -1},
    {sipName_SGMLParameter, static_cast<int>(QsciLexerHTML::SGMLParameter), -1},
    {sipName_SGMLParameterComment, static_cast<int>(QsciLexerHTML::SGMLParameterComment), -1},
    {sipName_SGMLSingleQuotedString, static_cast<int>(QsciLexerHTML::SGMLSingleQuotedString), -1},
    {sipName_SGMLSpecial, static_cast<int>(QsciLexerHTML::SGMLSpecial), -1},
    {sipName_Script, static_cast<int>(QsciLexerHTML::Script), -1},
    {sipName_Tag, static_cast<int>(QsciLexerHTML::Tag), -1},
    {sipName_UnknownAttribute, static_cast<int>(QsciLexerHTML::UnknownAttribute), -1},
    {sipName_UnknownTag, static_cast<int>(QsciLexerHTML::UnknownTag), -1},
    {sipName_VBScriptComment, static_cast<int>(QsciLexerHTML::VBScriptComment), -1},
    {sipName_VBScriptDefault, static_cast<int>(QsciLexerHTML::VBScriptDefault), -1},
    {sipName_VBScriptIdentifier, static_cast<int>(QsciLexerHTML::VBScriptIdentifier), -1},
    {sipName_VBScriptKeyword, static_cast<int>(QsciLexerHTML::VBScriptKeyword), -1},
    {sipName_VBScriptNumber, static_cast<int>(QsciLexerHTML::VBScriptNumber), -1},
    {sipName_VBScriptStart, static_cast<int>(QsciLexerHTML::VBScriptStart), -1},
    {sipName_VBScriptString, static_cast<int>(QsciLexerHTML::VBScriptString), -1},
    {sipName_VBScriptUnclosedString, static_cast<int>(QsciLexerHTML::VBScriptUnclosedString), -1},
    {sipName_XMLEnd, static_cast<int>(QsciLexerHTML::XMLEnd), -1},
    {sipName_XMLStart, static_cast<int>(QsciLexerHTML::XMLStart), -1},
    {sipName_XMLTagEnd, static_cast<int>(QsciLexerHTML::XMLTagEnd), -1},
};

PyDoc_STRVAR(doc_QsciLexerHTML, "\1QsciLexerHTML(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_Qsci_QsciLexerHTML = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QsciLexerHTML,
        {0}
    },
    {
        sipNameNr_QsciLexerHTML,
        {0, 0, 1},
        26, methods_QsciLexerHTML,
        110, enummembers_QsciLexerHTML,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QsciLexerHTML,
    -1,
    -1,
    supers_QsciLexerHTML,
    0,
    init_type_QsciLexerHTML,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QsciLexerHTML,
    0,
    0,
    0,
    release_QsciLexerHTML,
    cast_QsciLexerHTML,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QsciLexerHTML::staticMetaObject,
    0,
    0
};
