/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.3 on Mon Sep 22 18:00:47 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of QScintilla.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQsci.h"

#line 29 "sip/qscicommand.sip"
#include <Qsci/qscicommand.h>
#line 34 "./sipQsciQsciCommand.cpp"

#line 29 "sip/qsciscintilla.sip"
#include <Qsci/qsciscintilla.h>
#line 38 "./sipQsciQsciCommand.cpp"
#line 36 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 41 "./sipQsciQsciCommand.cpp"


PyDoc_STRVAR(doc_QsciCommand_command, "QsciCommand.command() -> QsciCommand.Command");

extern "C" {static PyObject *meth_QsciCommand_command(PyObject *, PyObject *);}
static PyObject *meth_QsciCommand_command(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciCommand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciCommand, &sipCpp))
        {
            QsciCommand::Command sipRes;

            sipRes = sipCpp->command();

            return sipConvertFromEnum(sipRes,sipType_QsciCommand_Command);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommand, sipName_command, doc_QsciCommand_command);

    return NULL;
}


PyDoc_STRVAR(doc_QsciCommand_execute, "QsciCommand.execute()");

extern "C" {static PyObject *meth_QsciCommand_execute(PyObject *, PyObject *);}
static PyObject *meth_QsciCommand_execute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QsciCommand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciCommand, &sipCpp))
        {
            sipCpp->execute();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommand, sipName_execute, doc_QsciCommand_execute);

    return NULL;
}


PyDoc_STRVAR(doc_QsciCommand_setKey, "QsciCommand.setKey(int)");

extern "C" {static PyObject *meth_QsciCommand_setKey(PyObject *, PyObject *);}
static PyObject *meth_QsciCommand_setKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciCommand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciCommand, &sipCpp, &a0))
        {
            sipCpp->setKey(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommand, sipName_setKey, doc_QsciCommand_setKey);

    return NULL;
}


PyDoc_STRVAR(doc_QsciCommand_setAlternateKey, "QsciCommand.setAlternateKey(int)");

extern "C" {static PyObject *meth_QsciCommand_setAlternateKey(PyObject *, PyObject *);}
static PyObject *meth_QsciCommand_setAlternateKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QsciCommand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciCommand, &sipCpp, &a0))
        {
            sipCpp->setAlternateKey(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommand, sipName_setAlternateKey, doc_QsciCommand_setAlternateKey);

    return NULL;
}


PyDoc_STRVAR(doc_QsciCommand_key, "QsciCommand.key() -> int");

extern "C" {static PyObject *meth_QsciCommand_key(PyObject *, PyObject *);}
static PyObject *meth_QsciCommand_key(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciCommand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciCommand, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->key();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommand, sipName_key, doc_QsciCommand_key);

    return NULL;
}


PyDoc_STRVAR(doc_QsciCommand_alternateKey, "QsciCommand.alternateKey() -> int");

extern "C" {static PyObject *meth_QsciCommand_alternateKey(PyObject *, PyObject *);}
static PyObject *meth_QsciCommand_alternateKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciCommand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciCommand, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->alternateKey();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommand, sipName_alternateKey, doc_QsciCommand_alternateKey);

    return NULL;
}


PyDoc_STRVAR(doc_QsciCommand_validKey, "QsciCommand.validKey(int) -> bool");

extern "C" {static PyObject *meth_QsciCommand_validKey(PyObject *, PyObject *);}
static PyObject *meth_QsciCommand_validKey(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            bool sipRes;

            sipRes = QsciCommand::validKey(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommand, sipName_validKey, doc_QsciCommand_validKey);

    return NULL;
}


PyDoc_STRVAR(doc_QsciCommand_description, "QsciCommand.description() -> QString");

extern "C" {static PyObject *meth_QsciCommand_description(PyObject *, PyObject *);}
static PyObject *meth_QsciCommand_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciCommand *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciCommand, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->description());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciCommand, sipName_description, doc_QsciCommand_description);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QsciCommand(void *, const sipTypeDef *);}
static void *cast_QsciCommand(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QsciCommand)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QsciCommand(void *, int);}
static void release_QsciCommand(void *sipCppV,int)
{
    delete reinterpret_cast<QsciCommand *>(sipCppV);
}


extern "C" {static void dealloc_QsciCommand(sipSimpleWrapper *);}
static void dealloc_QsciCommand(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QsciCommand(sipGetAddress(sipSelf),0);
    }
}


static PyMethodDef methods_QsciCommand[] = {
    {SIP_MLNAME_CAST(sipName_alternateKey), meth_QsciCommand_alternateKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciCommand_alternateKey)},
    {SIP_MLNAME_CAST(sipName_command), meth_QsciCommand_command, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciCommand_command)},
    {SIP_MLNAME_CAST(sipName_description), meth_QsciCommand_description, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciCommand_description)},
    {SIP_MLNAME_CAST(sipName_execute), meth_QsciCommand_execute, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciCommand_execute)},
    {SIP_MLNAME_CAST(sipName_key), meth_QsciCommand_key, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciCommand_key)},
    {SIP_MLNAME_CAST(sipName_setAlternateKey), meth_QsciCommand_setAlternateKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciCommand_setAlternateKey)},
    {SIP_MLNAME_CAST(sipName_setKey), meth_QsciCommand_setKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciCommand_setKey)},
    {SIP_MLNAME_CAST(sipName_validKey), meth_QsciCommand_validKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciCommand_validKey)}
};

static sipEnumMemberDef enummembers_QsciCommand[] = {
    {sipName_Backtab, static_cast<int>(QsciCommand::Backtab), 5},
    {sipName_Cancel, static_cast<int>(QsciCommand::Cancel), 5},
    {sipName_CharLeft, static_cast<int>(QsciCommand::CharLeft), 5},
    {sipName_CharLeftExtend, static_cast<int>(QsciCommand::CharLeftExtend), 5},
    {sipName_CharLeftRectExtend, static_cast<int>(QsciCommand::CharLeftRectExtend), 5},
    {sipName_CharRight, static_cast<int>(QsciCommand::CharRight), 5},
    {sipName_CharRightExtend, static_cast<int>(QsciCommand::CharRightExtend), 5},
    {sipName_CharRightRectExtend, static_cast<int>(QsciCommand::CharRightRectExtend), 5},
    {sipName_Delete, static_cast<int>(QsciCommand::Delete), 5},
    {sipName_DeleteBack, static_cast<int>(QsciCommand::DeleteBack), 5},
    {sipName_DeleteBackNotLine, static_cast<int>(QsciCommand::DeleteBackNotLine), 5},
    {sipName_DeleteLineLeft, static_cast<int>(QsciCommand::DeleteLineLeft), 5},
    {sipName_DeleteLineRight, static_cast<int>(QsciCommand::DeleteLineRight), 5},
    {sipName_DeleteWordLeft, static_cast<int>(QsciCommand::DeleteWordLeft), 5},
    {sipName_DeleteWordRight, static_cast<int>(QsciCommand::DeleteWordRight), 5},
    {sipName_DeleteWordRightEnd, static_cast<int>(QsciCommand::DeleteWordRightEnd), 5},
    {sipName_DocumentEnd, static_cast<int>(QsciCommand::DocumentEnd), 5},
    {sipName_DocumentEndExtend, static_cast<int>(QsciCommand::DocumentEndExtend), 5},
    {sipName_DocumentStart, static_cast<int>(QsciCommand::DocumentStart), 5},
    {sipName_DocumentStartExtend, static_cast<int>(QsciCommand::DocumentStartExtend), 5},
    {sipName_EditToggleOvertype, static_cast<int>(QsciCommand::EditToggleOvertype), 5},
    {sipName_Formfeed, static_cast<int>(QsciCommand::Formfeed), 5},
    {sipName_Home, static_cast<int>(QsciCommand::Home), 5},
    {sipName_HomeDisplay, static_cast<int>(QsciCommand::HomeDisplay), 5},
    {sipName_HomeDisplayExtend, static_cast<int>(QsciCommand::HomeDisplayExtend), 5},
    {sipName_HomeExtend, static_cast<int>(QsciCommand::HomeExtend), 5},
    {sipName_HomeRectExtend, static_cast<int>(QsciCommand::HomeRectExtend), 5},
    {sipName_HomeWrap, static_cast<int>(QsciCommand::HomeWrap), 5},
    {sipName_HomeWrapExtend, static_cast<int>(QsciCommand::HomeWrapExtend), 5},
    {sipName_LineCopy, static_cast<int>(QsciCommand::LineCopy), 5},
    {sipName_LineCut, static_cast<int>(QsciCommand::LineCut), 5},
    {sipName_LineDelete, static_cast<int>(QsciCommand::LineDelete), 5},
    {sipName_LineDown, static_cast<int>(QsciCommand::LineDown), 5},
    {sipName_LineDownExtend, static_cast<int>(QsciCommand::LineDownExtend), 5},
    {sipName_LineDownRectExtend, static_cast<int>(QsciCommand::LineDownRectExtend), 5},
    {sipName_LineDuplicate, static_cast<int>(QsciCommand::LineDuplicate), 5},
    {sipName_LineEnd, static_cast<int>(QsciCommand::LineEnd), 5},
    {sipName_LineEndDisplay, static_cast<int>(QsciCommand::LineEndDisplay), 5},
    {sipName_LineEndDisplayExtend, static_cast<int>(QsciCommand::LineEndDisplayExtend), 5},
    {sipName_LineEndExtend, static_cast<int>(QsciCommand::LineEndExtend), 5},
    {sipName_LineEndRectExtend, static_cast<int>(QsciCommand::LineEndRectExtend), 5},
    {sipName_LineEndWrap, static_cast<int>(QsciCommand::LineEndWrap), 5},
    {sipName_LineEndWrapExtend, static_cast<int>(QsciCommand::LineEndWrapExtend), 5},
    {sipName_LineScrollDown, static_cast<int>(QsciCommand::LineScrollDown), 5},
    {sipName_LineScrollUp, static_cast<int>(QsciCommand::LineScrollUp), 5},
    {sipName_LineTranspose, static_cast<int>(QsciCommand::LineTranspose), 5},
    {sipName_LineUp, static_cast<int>(QsciCommand::LineUp), 5},
    {sipName_LineUpExtend, static_cast<int>(QsciCommand::LineUpExtend), 5},
    {sipName_LineUpRectExtend, static_cast<int>(QsciCommand::LineUpRectExtend), 5},
    {sipName_MoveSelectedLinesDown, static_cast<int>(QsciCommand::MoveSelectedLinesDown), 5},
    {sipName_MoveSelectedLinesUp, static_cast<int>(QsciCommand::MoveSelectedLinesUp), 5},
    {sipName_Newline, static_cast<int>(QsciCommand::Newline), 5},
    {sipName_PageDown, static_cast<int>(QsciCommand::PageDown), 5},
    {sipName_PageDownExtend, static_cast<int>(QsciCommand::PageDownExtend), 5},
    {sipName_PageDownRectExtend, static_cast<int>(QsciCommand::PageDownRectExtend), 5},
    {sipName_PageUp, static_cast<int>(QsciCommand::PageUp), 5},
    {sipName_PageUpExtend, static_cast<int>(QsciCommand::PageUpExtend), 5},
    {sipName_PageUpRectExtend, static_cast<int>(QsciCommand::PageUpRectExtend), 5},
    {sipName_ParaDown, static_cast<int>(QsciCommand::ParaDown), 5},
    {sipName_ParaDownExtend, static_cast<int>(QsciCommand::ParaDownExtend), 5},
    {sipName_ParaUp, static_cast<int>(QsciCommand::ParaUp), 5},
    {sipName_ParaUpExtend, static_cast<int>(QsciCommand::ParaUpExtend), 5},
    {sipName_Paste, static_cast<int>(QsciCommand::Paste), 5},
    {sipName_Redo, static_cast<int>(QsciCommand::Redo), 5},
    {sipName_ScrollToEnd, static_cast<int>(QsciCommand::ScrollToEnd), 5},
    {sipName_ScrollToStart, static_cast<int>(QsciCommand::ScrollToStart), 5},
    {sipName_SelectAll, static_cast<int>(QsciCommand::SelectAll), 5},
    {sipName_SelectionCopy, static_cast<int>(QsciCommand::SelectionCopy), 5},
    {sipName_SelectionCut, static_cast<int>(QsciCommand::SelectionCut), 5},
    {sipName_SelectionDuplicate, static_cast<int>(QsciCommand::SelectionDuplicate), 5},
    {sipName_SelectionLowerCase, static_cast<int>(QsciCommand::SelectionLowerCase), 5},
    {sipName_SelectionUpperCase, static_cast<int>(QsciCommand::SelectionUpperCase), 5},
    {sipName_StutteredPageDown, static_cast<int>(QsciCommand::StutteredPageDown), 5},
    {sipName_StutteredPageDownExtend, static_cast<int>(QsciCommand::StutteredPageDownExtend), 5},
    {sipName_StutteredPageUp, static_cast<int>(QsciCommand::StutteredPageUp), 5},
    {sipName_StutteredPageUpExtend, static_cast<int>(QsciCommand::StutteredPageUpExtend), 5},
    {sipName_Tab, static_cast<int>(QsciCommand::Tab), 5},
    {sipName_Undo, static_cast<int>(QsciCommand::Undo), 5},
    {sipName_VCHome, static_cast<int>(QsciCommand::VCHome), 5},
    {sipName_VCHomeExtend, static_cast<int>(QsciCommand::VCHomeExtend), 5},
    {sipName_VCHomeRectExtend, static_cast<int>(QsciCommand::VCHomeRectExtend), 5},
    {sipName_VCHomeWrap, static_cast<int>(QsciCommand::VCHomeWrap), 5},
    {sipName_VCHomeWrapExtend, static_cast<int>(QsciCommand::VCHomeWrapExtend), 5},
    {sipName_VerticalCentreCaret, static_cast<int>(QsciCommand::VerticalCentreCaret), 5},
    {sipName_WordLeft, static_cast<int>(QsciCommand::WordLeft), 5},
    {sipName_WordLeftEnd, static_cast<int>(QsciCommand::WordLeftEnd), 5},
    {sipName_WordLeftEndExtend, static_cast<int>(QsciCommand::WordLeftEndExtend), 5},
    {sipName_WordLeftExtend, static_cast<int>(QsciCommand::WordLeftExtend), 5},
    {sipName_WordPartLeft, static_cast<int>(QsciCommand::WordPartLeft), 5},
    {sipName_WordPartLeftExtend, static_cast<int>(QsciCommand::WordPartLeftExtend), 5},
    {sipName_WordPartRight, static_cast<int>(QsciCommand::WordPartRight), 5},
    {sipName_WordPartRightExtend, static_cast<int>(QsciCommand::WordPartRightExtend), 5},
    {sipName_WordRight, static_cast<int>(QsciCommand::WordRight), 5},
    {sipName_WordRightEnd, static_cast<int>(QsciCommand::WordRightEnd), 5},
    {sipName_WordRightEndExtend, static_cast<int>(QsciCommand::WordRightEndExtend), 5},
    {sipName_WordRightExtend, static_cast<int>(QsciCommand::WordRightExtend), 5},
    {sipName_ZoomIn, static_cast<int>(QsciCommand::ZoomIn), 5},
    {sipName_ZoomOut, static_cast<int>(QsciCommand::ZoomOut), 5},
};


pyqt4ClassTypeDef sipTypeDef_Qsci_QsciCommand = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QsciCommand,
        {0}
    },
    {
        sipNameNr_QsciCommand,
        {0, 0, 1},
        8, methods_QsciCommand,
        98, enummembers_QsciCommand,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QsciCommand,
    0,
    0,
    0,
    release_QsciCommand,
    cast_QsciCommand,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
