/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.3 on Mon Sep 22 18:00:47 2014
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of QScintilla.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * If you are unsure which license is appropriate for your use, please
 * contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQsci.h"

#line 29 "sip/qscilexerpython.sip"
#include <Qsci/qscilexerpython.h>
#line 34 "./sipQsciQsciLexerPython.cpp"

#line 34 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 38 "./sipQsciQsciLexerPython.cpp"
#line 31 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qsettings.sip"
#include <qsettings.h>
#line 41 "./sipQsciQsciLexerPython.cpp"
#line 36 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 44 "./sipQsciQsciLexerPython.cpp"
#line 35 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qcolor.sip"
#include <qcolor.h>
#line 47 "./sipQsciQsciLexerPython.cpp"
#line 35 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtGui/qfont.sip"
#include <qfont.h>
#line 50 "./sipQsciQsciLexerPython.cpp"
#line 29 "sip/qsciabstractapis.sip"
#include <Qsci/qsciabstractapis.h>
#line 53 "./sipQsciQsciLexerPython.cpp"
#line 29 "sip/qsciscintilla.sip"
#include <Qsci/qsciscintilla.h>
#line 56 "./sipQsciQsciLexerPython.cpp"
#line 31 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "./sipQsciQsciLexerPython.cpp"
#line 355 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "./sipQsciQsciLexerPython.cpp"
#line 338 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "./sipQsciQsciLexerPython.cpp"
#line 274 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 68 "./sipQsciQsciLexerPython.cpp"
#line 33 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 71 "./sipQsciQsciLexerPython.cpp"
#line 37 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 74 "./sipQsciQsciLexerPython.cpp"
#line 35 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77 "./sipQsciQsciLexerPython.cpp"
#line 120 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 80 "./sipQsciQsciLexerPython.cpp"
#line 31 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 83 "./sipQsciQsciLexerPython.cpp"
#line 35 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 86 "./sipQsciQsciLexerPython.cpp"
#line 31 "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 89 "./sipQsciQsciLexerPython.cpp"


class sipQsciLexerPython : public QsciLexerPython
{
public:
    sipQsciLexerPython(QObject*);
    virtual ~sipQsciLexerPython();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool writeProperties(QSettings&,const QString&) const;
    bool readProperties(QSettings&,const QString&);
    void setPaper(const QColor&,int);
    void setFont(const QFont&,int);
    void setEolFill(bool,int);
    void setColor(const QColor&,int);
    void setAutoIndentStyle(int);
    const char* wordCharacters() const;
    int styleBitsNeeded() const;
    void refreshProperties();
    QColor defaultPaper(int) const;
    QFont defaultFont(int) const;
    bool defaultEolFill(int) const;
    QColor defaultColor(int) const;
    QColor paper(int) const;
    QString description(int) const;
    const char* keywords(int) const;
    QFont font(int) const;
    bool eolFill(int) const;
    QColor color(int) const;
    int lexerId() const;
    const char* lexer() const;
    const char* language() const;
    void setIndentationWarning(QsciLexerPython::IndentationWarning);
    void setFoldQuotes(bool);
    void setFoldComments(bool);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQsciLexerPython(const sipQsciLexerPython &);
    sipQsciLexerPython &operator = (const sipQsciLexerPython &);

    char sipPyMethods[33];
};

sipQsciLexerPython::sipQsciLexerPython(QObject*a0): QsciLexerPython(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQsciLexerPython::~sipQsciLexerPython()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQsciLexerPython::metaObject() const
{
    return sip_Qsci_qt_metaobject(sipPySelf,sipType_QsciLexerPython);
}

int sipQsciLexerPython::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QsciLexerPython::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_Qsci_qt_metacall(sipPySelf,sipType_QsciLexerPython,_c,_id,_a);

    return _id;
}

void *sipQsciLexerPython::qt_metacast(const char *_clname)
{
    return (sip_Qsci_qt_metacast(sipPySelf, sipType_QsciLexerPython, _clname)) ? this : QsciLexerPython::qt_metacast(_clname);
}

void sipQsciLexerPython::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QsciLexerPython::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_Qsci_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerPython::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QsciLexerPython::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_Qsci_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerPython::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QsciLexerPython::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_Qsci_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerPython::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QsciLexerPython::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_Qsci_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerPython::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QsciLexerPython::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_Qsci_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQsciLexerPython::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QsciLexerPython::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_Qsci_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQsciLexerPython::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QsciLexerPython::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_Qsci_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQsciLexerPython::writeProperties(QSettings& a0,const QString& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_writeProperties);

    if (!sipMeth)
        return QsciLexerPython::writeProperties(a0,a1);

    extern bool sipVH_Qsci_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSettings&,const QString&);

    return sipVH_Qsci_7(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQsciLexerPython::readProperties(QSettings& a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_readProperties);

    if (!sipMeth)
        return QsciLexerPython::readProperties(a0,a1);

    extern bool sipVH_Qsci_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSettings&,const QString&);

    return sipVH_Qsci_7(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerPython::setPaper(const QColor& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_setPaper);

    if (!sipMeth)
    {
        QsciLexerPython::setPaper(a0,a1);
        return;
    }

    extern void sipVH_Qsci_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QColor&,int);

    sipVH_Qsci_8(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerPython::setFont(const QFont& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_setFont);

    if (!sipMeth)
    {
        QsciLexerPython::setFont(a0,a1);
        return;
    }

    extern void sipVH_Qsci_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFont&,int);

    sipVH_Qsci_9(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerPython::setEolFill(bool a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_setEolFill);

    if (!sipMeth)
    {
        QsciLexerPython::setEolFill(a0,a1);
        return;
    }

    extern void sipVH_Qsci_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool,int);

    sipVH_Qsci_10(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerPython::setColor(const QColor& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_setColor);

    if (!sipMeth)
    {
        QsciLexerPython::setColor(a0,a1);
        return;
    }

    extern void sipVH_Qsci_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QColor&,int);

    sipVH_Qsci_8(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQsciLexerPython::setAutoIndentStyle(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_setAutoIndentStyle);

    if (!sipMeth)
    {
        QsciLexerPython::setAutoIndentStyle(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_Qsci_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

const char* sipQsciLexerPython::wordCharacters() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_wordCharacters);

    if (!sipMeth)
        return QsciLexerPython::wordCharacters();

    extern const char* sipVH_Qsci_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_11(sipGILState, 0, sipPySelf, sipMeth, -38);
}

int sipQsciLexerPython::styleBitsNeeded() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_styleBitsNeeded);

    if (!sipMeth)
        return QsciLexerPython::styleBitsNeeded();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_Qsci_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQsciLexerPython::refreshProperties()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_refreshProperties);

    if (!sipMeth)
    {
        QsciLexerPython::refreshProperties();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_Qsci_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

QColor sipQsciLexerPython::defaultPaper(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_defaultPaper);

    if (!sipMeth)
        return QsciLexerPython::defaultPaper(a0);

    extern QColor sipVH_Qsci_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QFont sipQsciLexerPython::defaultFont(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_defaultFont);

    if (!sipMeth)
        return QsciLexerPython::defaultFont(a0);

    extern QFont sipVH_Qsci_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQsciLexerPython::defaultEolFill(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_defaultEolFill);

    if (!sipMeth)
        return QsciLexerPython::defaultEolFill(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_23)(sipModuleAPI_Qsci_QtCore->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QColor sipQsciLexerPython::defaultColor(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_defaultColor);

    if (!sipMeth)
        return QsciLexerPython::defaultColor(a0);

    extern QColor sipVH_Qsci_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QColor sipQsciLexerPython::paper(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_paper);

    if (!sipMeth)
        return QsciLexerPython::paper(a0);

    extern QColor sipVH_Qsci_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QString sipQsciLexerPython::description(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_description);

    if (!sipMeth)
        return QsciLexerPython::description(a0);

    typedef QString (*sipVH_QtGui_111)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtGui_111)(sipModuleAPI_Qsci_QtGui->em_virthandlers[111]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

const char* sipQsciLexerPython::keywords(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_keywords);

    if (!sipMeth)
        return QsciLexerPython::keywords(a0);

    typedef const char* (*sipVH_QtGui_150)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, int);

    return ((sipVH_QtGui_150)(sipModuleAPI_Qsci_QtGui->em_virthandlers[150]))(sipGILState, 0, sipPySelf, sipMeth, a0, -39);
}

QFont sipQsciLexerPython::font(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_font);

    if (!sipMeth)
        return QsciLexerPython::font(a0);

    extern QFont sipVH_Qsci_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQsciLexerPython::eolFill(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_eolFill);

    if (!sipMeth)
        return QsciLexerPython::eolFill(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_23)(sipModuleAPI_Qsci_QtCore->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QColor sipQsciLexerPython::color(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_color);

    if (!sipMeth)
        return QsciLexerPython::color(a0);

    extern QColor sipVH_Qsci_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQsciLexerPython::lexerId() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_lexerId);

    if (!sipMeth)
        return QsciLexerPython::lexerId();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_Qsci_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

const char* sipQsciLexerPython::lexer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_lexer);

    if (!sipMeth)
        return QsciLexerPython::lexer();

    extern const char* sipVH_Qsci_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_11(sipGILState, 0, sipPySelf, sipMeth, -40);
}

const char* sipQsciLexerPython::language() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_language);

    if (!sipMeth)
        return QsciLexerPython::language();

    extern const char* sipVH_Qsci_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_Qsci_11(sipGILState, 0, sipPySelf, sipMeth, -41);
}

void sipQsciLexerPython::setIndentationWarning(QsciLexerPython::IndentationWarning a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_setIndentationWarning);

    if (!sipMeth)
    {
        QsciLexerPython::setIndentationWarning(a0);
        return;
    }

    extern void sipVH_Qsci_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QsciLexerPython::IndentationWarning);

    sipVH_Qsci_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerPython::setFoldQuotes(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_setFoldQuotes);

    if (!sipMeth)
    {
        QsciLexerPython::setFoldQuotes(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQsciLexerPython::setFoldComments(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_setFoldComments);

    if (!sipMeth)
    {
        QsciLexerPython::setFoldComments(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_Qsci_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QsciLexerPython_language, "QsciLexerPython.language() -> str");

extern "C" {static PyObject *meth_QsciLexerPython_language(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_language(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPython, &sipCpp))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerPython::language() : sipCpp->language());

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_language, doc_QsciLexerPython_language);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_lexer, "QsciLexerPython.lexer() -> str");

extern "C" {static PyObject *meth_QsciLexerPython_lexer(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_lexer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPython, &sipCpp))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerPython::lexer() : sipCpp->lexer());

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_lexer, doc_QsciLexerPython_lexer);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_defaultColor, "QsciLexerPython.defaultColor(int) -> QColor");

extern "C" {static PyObject *meth_QsciLexerPython_defaultColor(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_defaultColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerPython, &sipCpp, &a0))
        {
            QColor*sipRes;

            sipRes = new QColor((sipSelfWasArg ? sipCpp->QsciLexerPython::defaultColor(a0) : sipCpp->defaultColor(a0)));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_defaultColor, doc_QsciLexerPython_defaultColor);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_defaultEolFill, "QsciLexerPython.defaultEolFill(int) -> bool");

extern "C" {static PyObject *meth_QsciLexerPython_defaultEolFill(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_defaultEolFill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerPython, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerPython::defaultEolFill(a0) : sipCpp->defaultEolFill(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_defaultEolFill, doc_QsciLexerPython_defaultEolFill);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_defaultFont, "QsciLexerPython.defaultFont(int) -> QFont");

extern "C" {static PyObject *meth_QsciLexerPython_defaultFont(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_defaultFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerPython, &sipCpp, &a0))
        {
            QFont*sipRes;

            sipRes = new QFont((sipSelfWasArg ? sipCpp->QsciLexerPython::defaultFont(a0) : sipCpp->defaultFont(a0)));

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_defaultFont, doc_QsciLexerPython_defaultFont);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_defaultPaper, "QsciLexerPython.defaultPaper(int) -> QColor");

extern "C" {static PyObject *meth_QsciLexerPython_defaultPaper(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_defaultPaper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerPython, &sipCpp, &a0))
        {
            QColor*sipRes;

            sipRes = new QColor((sipSelfWasArg ? sipCpp->QsciLexerPython::defaultPaper(a0) : sipCpp->defaultPaper(a0)));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_defaultPaper, doc_QsciLexerPython_defaultPaper);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_keywords, "QsciLexerPython.keywords(int) -> str");

extern "C" {static PyObject *meth_QsciLexerPython_keywords(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_keywords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerPython, &sipCpp, &a0))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerPython::keywords(a0) : sipCpp->keywords(a0));

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_keywords, doc_QsciLexerPython_keywords);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_description, "QsciLexerPython.description(int) -> QString");

extern "C" {static PyObject *meth_QsciLexerPython_description(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QsciLexerPython, &sipCpp, &a0))
        {
            QString*sipRes;

            sipRes = new QString((sipSelfWasArg ? sipCpp->QsciLexerPython::description(a0) : sipCpp->description(a0)));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_description, doc_QsciLexerPython_description);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_refreshProperties, "QsciLexerPython.refreshProperties()");

extern "C" {static PyObject *meth_QsciLexerPython_refreshProperties(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_refreshProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPython, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QsciLexerPython::refreshProperties() : sipCpp->refreshProperties());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_refreshProperties, doc_QsciLexerPython_refreshProperties);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_foldComments, "QsciLexerPython.foldComments() -> bool");

extern "C" {static PyObject *meth_QsciLexerPython_foldComments(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_foldComments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPython, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->foldComments();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_foldComments, doc_QsciLexerPython_foldComments);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_setFoldCompact, "QsciLexerPython.setFoldCompact(bool)");

extern "C" {static PyObject *meth_QsciLexerPython_setFoldCompact(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_setFoldCompact(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerPython, &sipCpp, &a0))
        {
            sipCpp->setFoldCompact(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_setFoldCompact, doc_QsciLexerPython_setFoldCompact);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_foldCompact, "QsciLexerPython.foldCompact() -> bool");

extern "C" {static PyObject *meth_QsciLexerPython_foldCompact(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_foldCompact(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPython, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->foldCompact();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_foldCompact, doc_QsciLexerPython_foldCompact);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_foldQuotes, "QsciLexerPython.foldQuotes() -> bool");

extern "C" {static PyObject *meth_QsciLexerPython_foldQuotes(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_foldQuotes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPython, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->foldQuotes();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_foldQuotes, doc_QsciLexerPython_foldQuotes);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_indentationWarning, "QsciLexerPython.indentationWarning() -> QsciLexerPython.IndentationWarning");

extern "C" {static PyObject *meth_QsciLexerPython_indentationWarning(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_indentationWarning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPython, &sipCpp))
        {
            QsciLexerPython::IndentationWarning sipRes;

            sipRes = sipCpp->indentationWarning();

            return sipConvertFromEnum(sipRes,sipType_QsciLexerPython_IndentationWarning);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_indentationWarning, doc_QsciLexerPython_indentationWarning);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_setHighlightSubidentifiers, "QsciLexerPython.setHighlightSubidentifiers(bool)");

extern "C" {static PyObject *meth_QsciLexerPython_setHighlightSubidentifiers(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_setHighlightSubidentifiers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerPython, &sipCpp, &a0))
        {
            sipCpp->setHighlightSubidentifiers(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_setHighlightSubidentifiers, doc_QsciLexerPython_setHighlightSubidentifiers);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_highlightSubidentifiers, "QsciLexerPython.highlightSubidentifiers() -> bool");

extern "C" {static PyObject *meth_QsciLexerPython_highlightSubidentifiers(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_highlightSubidentifiers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPython, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->highlightSubidentifiers();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_highlightSubidentifiers, doc_QsciLexerPython_highlightSubidentifiers);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_setStringsOverNewlineAllowed, "QsciLexerPython.setStringsOverNewlineAllowed(bool)");

extern "C" {static PyObject *meth_QsciLexerPython_setStringsOverNewlineAllowed(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_setStringsOverNewlineAllowed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerPython, &sipCpp, &a0))
        {
            sipCpp->setStringsOverNewlineAllowed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_setStringsOverNewlineAllowed, doc_QsciLexerPython_setStringsOverNewlineAllowed);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_stringsOverNewlineAllowed, "QsciLexerPython.stringsOverNewlineAllowed() -> bool");

extern "C" {static PyObject *meth_QsciLexerPython_stringsOverNewlineAllowed(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_stringsOverNewlineAllowed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPython, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->stringsOverNewlineAllowed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_stringsOverNewlineAllowed, doc_QsciLexerPython_stringsOverNewlineAllowed);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_setV2UnicodeAllowed, "QsciLexerPython.setV2UnicodeAllowed(bool)");

extern "C" {static PyObject *meth_QsciLexerPython_setV2UnicodeAllowed(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_setV2UnicodeAllowed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerPython, &sipCpp, &a0))
        {
            sipCpp->setV2UnicodeAllowed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_setV2UnicodeAllowed, doc_QsciLexerPython_setV2UnicodeAllowed);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_v2UnicodeAllowed, "QsciLexerPython.v2UnicodeAllowed() -> bool");

extern "C" {static PyObject *meth_QsciLexerPython_v2UnicodeAllowed(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_v2UnicodeAllowed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPython, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->v2UnicodeAllowed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_v2UnicodeAllowed, doc_QsciLexerPython_v2UnicodeAllowed);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_setV3BinaryOctalAllowed, "QsciLexerPython.setV3BinaryOctalAllowed(bool)");

extern "C" {static PyObject *meth_QsciLexerPython_setV3BinaryOctalAllowed(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_setV3BinaryOctalAllowed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerPython, &sipCpp, &a0))
        {
            sipCpp->setV3BinaryOctalAllowed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_setV3BinaryOctalAllowed, doc_QsciLexerPython_setV3BinaryOctalAllowed);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_v3BinaryOctalAllowed, "QsciLexerPython.v3BinaryOctalAllowed() -> bool");

extern "C" {static PyObject *meth_QsciLexerPython_v3BinaryOctalAllowed(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_v3BinaryOctalAllowed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPython, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->v3BinaryOctalAllowed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_v3BinaryOctalAllowed, doc_QsciLexerPython_v3BinaryOctalAllowed);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_setV3BytesAllowed, "QsciLexerPython.setV3BytesAllowed(bool)");

extern "C" {static PyObject *meth_QsciLexerPython_setV3BytesAllowed(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_setV3BytesAllowed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerPython, &sipCpp, &a0))
        {
            sipCpp->setV3BytesAllowed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_setV3BytesAllowed, doc_QsciLexerPython_setV3BytesAllowed);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_v3BytesAllowed, "QsciLexerPython.v3BytesAllowed() -> bool");

extern "C" {static PyObject *meth_QsciLexerPython_v3BytesAllowed(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_v3BytesAllowed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QsciLexerPython, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->v3BytesAllowed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_v3BytesAllowed, doc_QsciLexerPython_v3BytesAllowed);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_setFoldComments, "QsciLexerPython.setFoldComments(bool)");

extern "C" {static PyObject *meth_QsciLexerPython_setFoldComments(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_setFoldComments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerPython, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QsciLexerPython::setFoldComments(a0) : sipCpp->setFoldComments(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_setFoldComments, doc_QsciLexerPython_setFoldComments);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_setFoldQuotes, "QsciLexerPython.setFoldQuotes(bool)");

extern "C" {static PyObject *meth_QsciLexerPython_setFoldQuotes(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_setFoldQuotes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QsciLexerPython, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QsciLexerPython::setFoldQuotes(a0) : sipCpp->setFoldQuotes(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_setFoldQuotes, doc_QsciLexerPython_setFoldQuotes);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_setIndentationWarning, "QsciLexerPython.setIndentationWarning(QsciLexerPython.IndentationWarning)");

extern "C" {static PyObject *meth_QsciLexerPython_setIndentationWarning(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_setIndentationWarning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QsciLexerPython::IndentationWarning a0;
        QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QsciLexerPython, &sipCpp, sipType_QsciLexerPython_IndentationWarning, &a0))
        {
            (sipSelfWasArg ? sipCpp->QsciLexerPython::setIndentationWarning(a0) : sipCpp->setIndentationWarning(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_setIndentationWarning, doc_QsciLexerPython_setIndentationWarning);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_readProperties, "QsciLexerPython.readProperties(QSettings, QString) -> bool");

extern "C" {static PyObject *meth_QsciLexerPython_readProperties(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_readProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSettings* a0;
        const QString* a1;
        int a1State = 0;
        QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QsciLexerPython, &sipCpp, sipType_QSettings, &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerPython::readProperties(*a0,*a1) : sipCpp->readProperties(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_readProperties, doc_QsciLexerPython_readProperties);

    return NULL;
}


PyDoc_STRVAR(doc_QsciLexerPython_writeProperties, "QsciLexerPython.writeProperties(QSettings, QString) -> bool");

extern "C" {static PyObject *meth_QsciLexerPython_writeProperties(PyObject *, PyObject *);}
static PyObject *meth_QsciLexerPython_writeProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSettings* a0;
        const QString* a1;
        int a1State = 0;
        const QsciLexerPython *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QsciLexerPython, &sipCpp, sipType_QSettings, &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QsciLexerPython::writeProperties(*a0,*a1) : sipCpp->writeProperties(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QsciLexerPython, sipName_writeProperties, doc_QsciLexerPython_writeProperties);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QsciLexerPython(void *, const sipTypeDef *);}
static void *cast_QsciLexerPython(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QsciLexerPython)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QsciLexer)->ctd_cast((QsciLexer *)(QsciLexerPython *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QsciLexerPython(void *, int);}
static void release_QsciLexerPython(void *sipCppV,int)
{
    QsciLexerPython *sipCpp = reinterpret_cast<QsciLexerPython *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QsciLexerPython(sipSimpleWrapper *);}
static void dealloc_QsciLexerPython(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQsciLexerPython *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QsciLexerPython(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QsciLexerPython(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QsciLexerPython(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQsciLexerPython *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQsciLexerPython(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QsciLexerPython[] = {{8, 255, 1}};


static PyMethodDef methods_QsciLexerPython[] = {
    {SIP_MLNAME_CAST(sipName_defaultColor), meth_QsciLexerPython_defaultColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_defaultColor)},
    {SIP_MLNAME_CAST(sipName_defaultEolFill), meth_QsciLexerPython_defaultEolFill, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_defaultEolFill)},
    {SIP_MLNAME_CAST(sipName_defaultFont), meth_QsciLexerPython_defaultFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_defaultFont)},
    {SIP_MLNAME_CAST(sipName_defaultPaper), meth_QsciLexerPython_defaultPaper, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_defaultPaper)},
    {SIP_MLNAME_CAST(sipName_description), meth_QsciLexerPython_description, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_description)},
    {SIP_MLNAME_CAST(sipName_foldComments), meth_QsciLexerPython_foldComments, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_foldComments)},
    {SIP_MLNAME_CAST(sipName_foldCompact), meth_QsciLexerPython_foldCompact, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_foldCompact)},
    {SIP_MLNAME_CAST(sipName_foldQuotes), meth_QsciLexerPython_foldQuotes, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_foldQuotes)},
    {SIP_MLNAME_CAST(sipName_highlightSubidentifiers), meth_QsciLexerPython_highlightSubidentifiers, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_highlightSubidentifiers)},
    {SIP_MLNAME_CAST(sipName_indentationWarning), meth_QsciLexerPython_indentationWarning, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_indentationWarning)},
    {SIP_MLNAME_CAST(sipName_keywords), meth_QsciLexerPython_keywords, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_keywords)},
    {SIP_MLNAME_CAST(sipName_language), meth_QsciLexerPython_language, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_language)},
    {SIP_MLNAME_CAST(sipName_lexer), meth_QsciLexerPython_lexer, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_lexer)},
    {SIP_MLNAME_CAST(sipName_readProperties), meth_QsciLexerPython_readProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_readProperties)},
    {SIP_MLNAME_CAST(sipName_refreshProperties), meth_QsciLexerPython_refreshProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_refreshProperties)},
    {SIP_MLNAME_CAST(sipName_setFoldComments), meth_QsciLexerPython_setFoldComments, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_setFoldComments)},
    {SIP_MLNAME_CAST(sipName_setFoldCompact), meth_QsciLexerPython_setFoldCompact, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_setFoldCompact)},
    {SIP_MLNAME_CAST(sipName_setFoldQuotes), meth_QsciLexerPython_setFoldQuotes, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_setFoldQuotes)},
    {SIP_MLNAME_CAST(sipName_setHighlightSubidentifiers), meth_QsciLexerPython_setHighlightSubidentifiers, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_setHighlightSubidentifiers)},
    {SIP_MLNAME_CAST(sipName_setIndentationWarning), meth_QsciLexerPython_setIndentationWarning, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_setIndentationWarning)},
    {SIP_MLNAME_CAST(sipName_setStringsOverNewlineAllowed), meth_QsciLexerPython_setStringsOverNewlineAllowed, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_setStringsOverNewlineAllowed)},
    {SIP_MLNAME_CAST(sipName_setV2UnicodeAllowed), meth_QsciLexerPython_setV2UnicodeAllowed, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_setV2UnicodeAllowed)},
    {SIP_MLNAME_CAST(sipName_setV3BinaryOctalAllowed), meth_QsciLexerPython_setV3BinaryOctalAllowed, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_setV3BinaryOctalAllowed)},
    {SIP_MLNAME_CAST(sipName_setV3BytesAllowed), meth_QsciLexerPython_setV3BytesAllowed, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_setV3BytesAllowed)},
    {SIP_MLNAME_CAST(sipName_stringsOverNewlineAllowed), meth_QsciLexerPython_stringsOverNewlineAllowed, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_stringsOverNewlineAllowed)},
    {SIP_MLNAME_CAST(sipName_v2UnicodeAllowed), meth_QsciLexerPython_v2UnicodeAllowed, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_v2UnicodeAllowed)},
    {SIP_MLNAME_CAST(sipName_v3BinaryOctalAllowed), meth_QsciLexerPython_v3BinaryOctalAllowed, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_v3BinaryOctalAllowed)},
    {SIP_MLNAME_CAST(sipName_v3BytesAllowed), meth_QsciLexerPython_v3BytesAllowed, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_v3BytesAllowed)},
    {SIP_MLNAME_CAST(sipName_writeProperties), meth_QsciLexerPython_writeProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QsciLexerPython_writeProperties)}
};

static sipEnumMemberDef enummembers_QsciLexerPython[] = {
    {sipName_ClassName, static_cast<int>(QsciLexerPython::ClassName), -1},
    {sipName_Comment, static_cast<int>(QsciLexerPython::Comment), -1},
    {sipName_CommentBlock, static_cast<int>(QsciLexerPython::CommentBlock), -1},
    {sipName_Decorator, static_cast<int>(QsciLexerPython::Decorator), -1},
    {sipName_Default, static_cast<int>(QsciLexerPython::Default), -1},
    {sipName_DoubleQuotedString, static_cast<int>(QsciLexerPython::DoubleQuotedString), -1},
    {sipName_FunctionMethodName, static_cast<int>(QsciLexerPython::FunctionMethodName), -1},
    {sipName_HighlightedIdentifier, static_cast<int>(QsciLexerPython::HighlightedIdentifier), -1},
    {sipName_Identifier, static_cast<int>(QsciLexerPython::Identifier), -1},
    {sipName_Inconsistent, static_cast<int>(QsciLexerPython::Inconsistent), 37},
    {sipName_Keyword, static_cast<int>(QsciLexerPython::Keyword), -1},
    {sipName_NoWarning, static_cast<int>(QsciLexerPython::NoWarning), 37},
    {sipName_Number, static_cast<int>(QsciLexerPython::Number), -1},
    {sipName_Operator, static_cast<int>(QsciLexerPython::Operator), -1},
    {sipName_SingleQuotedString, static_cast<int>(QsciLexerPython::SingleQuotedString), -1},
    {sipName_Spaces, static_cast<int>(QsciLexerPython::Spaces), 37},
    {sipName_Tabs, static_cast<int>(QsciLexerPython::Tabs), 37},
    {sipName_TabsAfterSpaces, static_cast<int>(QsciLexerPython::TabsAfterSpaces), 37},
    {sipName_TripleDoubleQuotedString, static_cast<int>(QsciLexerPython::TripleDoubleQuotedString), -1},
    {sipName_TripleSingleQuotedString, static_cast<int>(QsciLexerPython::TripleSingleQuotedString), -1},
    {sipName_UnclosedString, static_cast<int>(QsciLexerPython::UnclosedString), -1},
};

PyDoc_STRVAR(doc_QsciLexerPython, "\1QsciLexerPython(QObject parent=None)");


pyqt4ClassTypeDef sipTypeDef_Qsci_QsciLexerPython = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QsciLexerPython,
        {0}
    },
    {
        sipNameNr_QsciLexerPython,
        {0, 0, 1},
        29, methods_QsciLexerPython,
        21, enummembers_QsciLexerPython,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QsciLexerPython,
    -1,
    -1,
    supers_QsciLexerPython,
    0,
    init_type_QsciLexerPython,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QsciLexerPython,
    0,
    0,
    0,
    release_QsciLexerPython,
    cast_QsciLexerPython,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QsciLexerPython::staticMetaObject,
    0,
    0
};
